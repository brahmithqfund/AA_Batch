package pack;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.*;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class Active_Military_End extends AA_CO_ILP {
	////Leela----- Starts ------- ////
	
//@Test (priority=42,groups = "leela_OH_ILP") 

	 public void Loan_PmtAllExceptLast_DepLast_Clear_Return_() throws Exception {

	 	// Start test. Mention test script name
	 	String FileName= "AA_Loan_PmtAllExceptLast_DepLast_Clear_Return_TestData.xls";
	 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
	 	int lastrow=TestData.getLastRow("NewLoan");
	 	String sheetName="NewLoan";   
	 	//int lastrow=TestData.getLastRow("Borrower");
	 	System.out.println(lastrow);
	 	for(int row=2;row<=lastrow;row++)
	 	{
	 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
	 		//System.out.println(RunFlag);
	 	if(RunFlag.equals("Y"))
	 	{	
	 		//driver.get(appUrl);
	 		//test.log(LogStatus.INFO, "Application is launched");
	 		//driver.manage().window().maximize();
	 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
	 			String UserName = TestData.getCellData(sheetName,"UserName",row);
	 			String Password = TestData.getCellData(sheetName,"Password",row);
	 	       // System.out.println(Password);
	 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
	 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
	 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
	 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
	 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
	 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
	 	        String Header = StateID+ "_" + ProductID;
	 	        //System.out.println(SSN);
	 	        test = reports.startTest(Header+"_S.No:45"+"_"+PayFrequency+"_"+CollateralType, "Loan>payment all the installements acc to respective due dates except last installement>last # deposit>clear>Return");
	 	        appUrl = AppURL;
	 	        
	 	       // SetCurrentDate.SetCurrentDate(SSN, FileName);
	 	        
	 	        Login.Login(UserName, Password, StoreId);
	 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
	 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
	 	        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);
	 	        Payment_ILP.Payment_ILP(SSN, FileName);
	 	        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);
	 	        Payment_ILP.Payment_ILP(SSN, FileName);		
	 	  
	 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
	 	       // History.History(SSN, FileName, 0);

	 	        AgeStore_ILP.AgeStore_ILP(SSN, FileName, -1, 4);
	 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
	 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
	 	        StoreInfo.StoreInfo(SSN, FileName);
	 	        Safeassign.Safeassign(SSN, FileName);
	 	        Drawerassign.Drawerassign(SSN, FileName);
	 	        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1);
	 	        ACH_Deposit1.ACH_Deposit1(SSN, FileName, 0);

	 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 8, 4);
	 	       Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
	 	        ACHReturnPosting.ACHReturnPosting(SSN, FileName);

	 	       // Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);

	 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
	 	        
        		        	        	        
	 	}
	 	}
	 }

	 //@Test (priority=43,groups = "leela_OH_ILP") 

	 public void Loan_1stdeposit_clr_payoff_clear_return_() throws Exception {

	 	// Start test. Mention test script name
	 	String FileName= "AA_Loan_1stdeposit_clr_payoff_clear_return_TestData.xls";
	 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
	 	int lastrow=TestData.getLastRow("NewLoan");
	 	String sheetName="NewLoan";   
	 	//int lastrow=TestData.getLastRow("Borrower");
	 	System.out.println(lastrow);
	 	for(int row=2;row<=lastrow;row++)
	 	{
	 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
	 		//System.out.println(RunFlag);
	 	if(RunFlag.equals("Y"))
	 	{	
	 		//driver.get(appUrl);
	 		//test.log(LogStatus.INFO, "Application is launched");
	 		//driver.manage().window().maximize();
	 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
	 			String UserName = TestData.getCellData(sheetName,"UserName",row);
	 			String Password = TestData.getCellData(sheetName,"Password",row);
	 	       // System.out.println(Password);
	 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
	 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
	 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
	 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
	 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
	 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
	 	        String Header = StateID+ "_" + ProductID;
	 	        //System.out.println(SSN);
	 	        test = reports.startTest(Header+"_S.No:46"+"_"+PayFrequency+"_"+CollateralType, "Loan_1# deposit_clr_payoff_clear return");
	 	        appUrl = AppURL;
	 	        
	 	        SetCurrentDate.SetCurrentDate(SSN, FileName);
	 	        
	 	        Login.Login(UserName, Password, StoreId);
	 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
	 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
	 	   

	 	        AgeStore_ILP.AgeStore_ILP(SSN, FileName, -1, 2);
	 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
	 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
	 	        StoreInfo.StoreInfo(SSN, FileName);
	 	        Safeassign.Safeassign(SSN, FileName);
	 	        Drawerassign.Drawerassign(SSN, FileName);
	 	        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1);
	 	        ACH_Deposit.ACH_Deposit(SSN, FileName, 0);

	 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 8, 2);
	 	        Payoff_Installments.Payoff_Installments(SSN, FileName);
	 	       Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
	 	        ACHReturnPosting.ACHReturnPosting(SSN, FileName);
	 	    //    Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
	 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
	 	       		        		        	        	        
	 	}
	 	}
	 	

	 		}

	 	
			
			//@Test(priority = 44) 
			public void AA_Loan1stInsatallmentEODbatchprocess_Cure_Default() throws Exception {

				// Start test. Mention test script name
				String FileName = "AA_Loan1stInsatallmentEODbatchprocess_Cure_Default_Txn_Testdata.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/" + FileName);
				int lastrow = TestData.getLastRow("NewLoan");
				String sheetName = "NewLoan";
				// int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for (int row = 2; row <= lastrow; row++) {
					String RunFlag = TestData.getCellData(sheetName, "Run", row);
					// System.out.println(RunFlag);
					if (RunFlag.equals("Y")) {
						// driver.get(appUrl);
						// test.log(LogStatus.INFO, "Application is launched");
						// driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName, "AppURL", row);
						String UserName = TestData.getCellData(sheetName, "UserName", row);
						String Password = TestData.getCellData(sheetName, "Password", row);
						String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
						String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
						// System.out.println(Password);
						String StoreId = TestData.getCellData(sheetName, "StoreID", row);
						String ProductID = TestData.getCellData(sheetName, "ProductID", row);
						String StateID = TestData.getCellData(sheetName, "StateID", row);
						String SSN = TestData.getCellData(sheetName, "SSN", row);
						String Header = StateID + "_" + ProductID;
						// System.out.println(SSN);
						test = reports.startTest(Header + "_S.No:47" + "_" + PayFrequency + "_" + CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Cure end date");
						appUrl = AppURL;
							
							SetCurrentDate.SetCurrentDate(SSN, FileName);
						    
					        Login.Login(UserName, Password, StoreId);
					        
					        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test,AppURL, SSN,FileName);
					        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
					        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
					     	//History_Paymentcaluculation.History_Paymentcaluculation(SSN, FileName);
					        
					      
						 
					}
				}

			}	
			
			//@Test(priority = 45) 
			public void AA_Loan1stInsatallmentEODbatchprocess_Cure_BeforeCureenddateDefault() throws Exception {

				// Start test. Mention test script name
				String FileName = "AA_Loan1stInsatallmentEODbatchprocess_Cure_BeforecureendDateDefault_Txn_Testdata.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+ FileName);
				int lastrow = TestData.getLastRow("NewLoan");
				String sheetName = "NewLoan";
				// int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for (int row = 2; row <= lastrow; row++) {
					String RunFlag = TestData.getCellData(sheetName, "Run", row);
					// System.out.println(RunFlag);
					if (RunFlag.equals("Y")) {
						// driver.get(appUrl);
						// test.log(LogStatus.INFO, "Application is launched");
						// driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName, "AppURL", row);
						String UserName = TestData.getCellData(sheetName, "UserName", row);
						String Password = TestData.getCellData(sheetName, "Password", row);
						String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
						String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
						// System.out.println(Password);
						String StoreId = TestData.getCellData(sheetName, "StoreID", row);
						String ProductID = TestData.getCellData(sheetName, "ProductID", row);
						String StateID = TestData.getCellData(sheetName, "StateID", row);
						String SSN = TestData.getCellData(sheetName, "SSN", row);
						String Header = StateID + "_" + ProductID;
						// System.out.println(SSN);
						test = reports.startTest(Header + "_S.No:48" + "_" + PayFrequency + "_" + CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Before Cure end date");
						appUrl = AppURL;
						
						    
					        Login.Login(UserName, Password, StoreId);
					        
					        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test,AppURL, SSN,FileName);
					        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
					        if(CollateralType.contains("CASH")){
					      
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
					        DeliquentPaymentStatus.DeliquentPaymentStatus(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 28, 2);
					        }
					        if(CollateralType.contains("ACH")){
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 0);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 10);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 28);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        }
					     	//History_LoanStatus.History_LoanStatus(SSN, FileName);
					        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
					        
					      
						 
					}
				}

			}		
			
			//@Test (priority=46,groups = "leela_OH_ILP") 

			public void Loan_PmtAllInstExceptLast_DFLTLastInst_() throws Exception {

				// Start test. Mention test script name
				String FileName= "AA_Loan_PmtAllInstExceptLast_DFLTLastInst_TestData.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
				int lastrow=TestData.getLastRow("NewLoan");
				String sheetName="NewLoan";   
				//int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for(int row=2;row<=lastrow;row++)
				{
					String RunFlag = TestData.getCellData(sheetName,"Run",row);
					//System.out.println(RunFlag);
				if(RunFlag.equals("Y"))
				{	
					//driver.get(appUrl);
					//test.log(LogStatus.INFO, "Application is launched");
					//driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName,"AppURL",row);
						String UserName = TestData.getCellData(sheetName,"UserName",row);
						String Password = TestData.getCellData(sheetName,"Password",row);
				       // System.out.println(Password);
				        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
				        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				        String StateID = TestData.getCellData(sheetName,"StateID",row);
				        String SSN = TestData.getCellData(sheetName,"SSN",row);	
				        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
						String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				        String Header = StateID+ "_" + ProductID;
				        //System.out.println(SSN);
				        test = reports.startTest(Header+"_S.No:49"+"_"+PayFrequency+"_"+CollateralType, "Laon_paymet all the installement except last #_Run EOD batch process on last # due date_Run EOD Batch process(due date+10 days)_Run EOD batch process on Cure end date");
				        appUrl = AppURL;

				        
				        Login.Login(UserName, Password, StoreId);
				        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
				        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
				        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);
				        Payment_ILP.Payment_ILP(SSN, FileName);
				        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);
				        Payment_ILP.Payment_ILP(SSN, FileName);
				        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 4);
				        Payment_ILP.Payment_ILP(SSN, FileName);
				        AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 5);
				        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 5);
				        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
				        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 5);
				        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 5);
				        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
				        //History.History(SSN, FileName, 0); 	        
				}
				}
				

			}

				
			
			//@Test(priority = 47)  
			public void AA_Loan1stInsatallmentEODbatchprocess_Cure_1stInsatllPayment_CureenddateDefault() throws Exception {

				// Start test. Mention test script name
				String FileName = "AA_Loan1stInsatallmentEODbatchprocess_Cure_IstInsatllPMT_CureEndDateEODbatchProcess_Txn_Testdata.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/" + FileName);
				int lastrow = TestData.getLastRow("NewLoan");
				String sheetName = "NewLoan";
				// int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for (int row = 2; row <= lastrow; row++) {
					String RunFlag = TestData.getCellData(sheetName, "Run", row);
					// System.out.println(RunFlag);
					if (RunFlag.equals("Y")) {
						// driver.get(appUrl);
						// test.log(LogStatus.INFO, "Application is launched");
						// driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName, "AppURL", row);
						String UserName = TestData.getCellData(sheetName, "UserName", row);
						String Password = TestData.getCellData(sheetName, "Password", row);
						String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
						String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
						// System.out.println(Password);
						String StoreId = TestData.getCellData(sheetName, "StoreID", row);
						String ProductID = TestData.getCellData(sheetName, "ProductID", row);
						String StateID = TestData.getCellData(sheetName, "StateID", row);
						String SSN = TestData.getCellData(sheetName, "SSN", row);
						String Header = StateID + "_" + ProductID;
						// System.out.println(SSN);
						test = reports.startTest(Header + "_S.No:50" + "_" + PayFrequency + "_" + CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>payment(1# amount)>Run EODbatch process on Cure end date");
						appUrl = AppURL;
						
						    
					        Login.Login(UserName, Password, StoreId);
					        
					        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test,AppURL, SSN,FileName);
					        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
					        if(CollateralType.contains("CASH")){
					      
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
					        DeliquentPaymentStatus.DeliquentPaymentStatus(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
						
						
					        Payment_ILP.Payment_ILP(SSN, FileName);
						
					    //    PaymentcureAmount_ILP.PaymentcureAmount_ILP(SSN, FileName); // not required this step
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
					        }
					
					
					        if(CollateralType.contains("ACH")){
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 0);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 10);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        }						        
					
					        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
					        
					      
						 
					}
				}
				}

			
			
			@Test(priority = 48)  //Last
			public void AA_Loan1stInsatallmentEODbatchprocess_Cure_1stInsatllPayment_void_CureenddateDefault() throws Exception {

				// Start test. Mention test script name
				String FileName = "AA_Loan1stInsatallmentEODbatchprocess_Cure_IstInsatllPMT_void_CureEndDateEODbatchProcess_Txn_Testdata.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/" + FileName);
				int lastrow = TestData.getLastRow("NewLoan");
				String sheetName = "NewLoan";
				// int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for (int row = 2; row <= lastrow; row++) {
					String RunFlag = TestData.getCellData(sheetName, "Run", row);
					// System.out.println(RunFlag);
					if (RunFlag.equals("Y")) {
						// driver.get(appUrl);
						// test.log(LogStatus.INFO, "Application is launched");
						// driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName, "AppURL", row);
						String UserName = TestData.getCellData(sheetName, "UserName", row);
						String Password = TestData.getCellData(sheetName, "Password", row);
						String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
						String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
						// System.out.println(Password);
						String StoreId = TestData.getCellData(sheetName, "StoreID", row);
						String ProductID = TestData.getCellData(sheetName, "ProductID", row);
						String StateID = TestData.getCellData(sheetName, "StateID", row);
						String SSN = TestData.getCellData(sheetName, "SSN", row);
						String Header = StateID + "_" + ProductID;
						// System.out.println(SSN);
						test = reports.startTest(Header + "_S.No:51" + "_" + PayFrequency + "_" + CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>payment(1# amount)>void>Run EOD batch process on Cure end date");
						appUrl = AppURL;
						
						    
					        Login.Login(UserName, Password, StoreId);
					        
					        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test,AppURL, SSN,FileName);
					        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
					        if(CollateralType.contains("CASH")){
					      
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
					        DeliquentPaymentStatus.DeliquentPaymentStatus(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
					        Payment_ILP.Payment_ILP(SSN, FileName);
					       // PaymentcureAmount_ILP.PaymentcureAmount_ILP(SSN, FileName);
					        Void_Payment.Void_Payment(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
					        }
					        if(CollateralType.contains("ACH")){
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 0);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 10);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);	
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        }
					      //  History_Paymentcaluculation.History_Paymentcaluculation(SSN, FileName);
					        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
					        
					      
						 
					}
				}

			}
			
			@Test(priority = 49) 
			public void AA_Loan1stInsatallmentEODbatchprocess_Cure_Less1stInsatllPayment_CureenddateDefault() throws Exception {

				// Start test. Mention test script name
				String FileName = "AA_Loan1stInsatallmentEODbatchprocess_Cure_IstInsatllLessPMT_CureEndDateEODbatchProcess_Txn_Testdata.xls";
				Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/" + FileName);
				int lastrow = TestData.getLastRow("NewLoan");
				String sheetName = "NewLoan";
				// int lastrow=TestData.getLastRow("Borrower");
				System.out.println(lastrow);
				for (int row = 2; row <= lastrow; row++) {
					String RunFlag = TestData.getCellData(sheetName, "Run", row);
					// System.out.println(RunFlag);
					if (RunFlag.equals("Y")) {
						// driver.get(appUrl);
						// test.log(LogStatus.INFO, "Application is launched");
						// driver.manage().window().maximize();
						String AppURL = TestData.getCellData(sheetName, "AppURL", row);
						String UserName = TestData.getCellData(sheetName, "UserName", row);
						String Password = TestData.getCellData(sheetName, "Password", row);
						String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
						String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
						// System.out.println(Password);
						String StoreId = TestData.getCellData(sheetName, "StoreID", row);
						String ProductID = TestData.getCellData(sheetName, "ProductID", row);
						String StateID = TestData.getCellData(sheetName, "StateID", row);
						String SSN = TestData.getCellData(sheetName, "SSN", row);
						String Header = StateID + "_" + ProductID;
						// System.out.println(SSN);
						test = reports.startTest(Header + "_S.No:52" + "_" + PayFrequency + "_" + CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>payment(less than1# amount)>Run EOD batch process on Cure end date");
						appUrl = AppURL;
						
						    
					        Login.Login(UserName, Password, StoreId);
					        
					        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test,AppURL, SSN,FileName);
					        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
					        if(CollateralType.contains("CASH")){
					      
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
					        DeliquentPaymentStatus.DeliquentPaymentStatus(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
					        PaymentLess_ILP.PaymentLess_ILP(SSN, FileName);
					        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
					        }
					        if(CollateralType.contains("ACH")){
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 0);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 10);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        StoreInfo.StoreInfo(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        AgeStore_1stInstallment.AgeStore_1stInstallment(SSN, FileName, 31);
					        DrawerDeassign.DrawerDeassign(SSN, FileName);
					        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
					        Safeassign.Safeassign(SSN, FileName);
					        Drawerassign.Drawerassign(SSN, FileName);
					        }
					      //  History_Paymentcaluculation.History_Paymentcaluculation(SSN, FileName);
					        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
					        
					      
						 
					}
				}

			}
			@Test (priority=50,groups = "leela_OH_ILP")
			
			public void CO_ILP_Loan_DefaultPayment() throws Exception {
						
						
							// Start test. Mention test script name
							String FileName= "AA_CO_ILP_Loan_DefaultPayment_Testdata.xls";
							Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
							int lastrow=TestData.getLastRow("NewLoan");
							String sheetName="NewLoan";
							
							System.out.println(lastrow);
							for(int row=2;row<=lastrow;row++)
							{
								String RunFlag = TestData.getCellData(sheetName,"Run",row);

							if(RunFlag.equals("Y"))
							{	

									String AppURL = TestData.getCellData(sheetName,"AppURL",row);
									String UserName = TestData.getCellData(sheetName,"UserName",row);
									String Password = TestData.getCellData(sheetName,"Password",row);
							        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
							        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
							        String StateID = TestData.getCellData(sheetName,"StateID",row);
							        String SSN = TestData.getCellData(sheetName,"SSN",row);	
							        String Header = StateID+ "_" + ProductID;
							        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
									String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

									test = reports.startTest(Header+"_S.No:53"+"_"+PayFrequency+"_"+CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Cure end date>select default payment option form drop down>enter full amount(with all possible tender types)");

							         Assert.assertTrue(true);
							         appUrl = AppURL;
							         
				                     Login.Login(UserName, Password, StoreId);
							         RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
							         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
							         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
							         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
							      
							         EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
							         
							         Default_Payment_ILP.Default_Payment_ILP(SSN, FileName, 1);
							        // History.History(SSN, FileName);
							         Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
							     
				                     
							 }
							
							}	
						}			
		
		@Test (priority=51,groups = "leela_OH_ILP")
			
			public void CO_ILP_Loan_DefaulPartialPayment_Void() throws Exception {
								
								
									// Start test. Mention test script name
									String FileName= "AA_CO_ILP_Loan_DefaultPartialPayment_Testdata.xls";
									Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
									int lastrow=TestData.getLastRow("NewLoan");
									String sheetName="NewLoan";
									
									System.out.println(lastrow);
									
									for(int row=2;row<=lastrow;row++)
									{
										String RunFlag = TestData.getCellData(sheetName,"Run",row);

									if(RunFlag.equals("Y"))
									{	

											String AppURL = TestData.getCellData(sheetName,"AppURL",row);
											String UserName = TestData.getCellData(sheetName,"UserName",row);
											String Password = TestData.getCellData(sheetName,"Password",row);
									        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
									        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
									        String StateID = TestData.getCellData(sheetName,"StateID",row);
									        String SSN = TestData.getCellData(sheetName,"SSN",row);	
									        String Header = StateID+ "_" + ProductID;
									        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
											String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

											test = reports.startTest(Header+"_S.No:54"+"_"+PayFrequency+"_"+CollateralType,"Loan >Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Cure end date>partial default amount");

									         Assert.assertTrue(true);
									         appUrl = AppURL;
									         
						                     Login.Login(UserName, Password, StoreId);
						                     RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
									         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
									         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
									         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
									         EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
									         Default_Payment_ILP.Default_Payment_ILP(SSN, FileName, 0.5);
									         Void_Default_Payment_ILP.Void_Default_Payment_ILP(SSN, FileName);
									       //  History.History(SSN, FileName);
									         Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
									     
						                     
									 }
									
									}	
								}
		
			
			
	@Test (priority=52,groups = "leela_OH_ILP")
				
				public void CO_ILP_Loan_DefaultPayment_Void() throws Exception {
							
							
								// Start test. Mention test script name
								String FileName= "AA_CO_ILP_Loan_DefaultPayment_Void_Testdata.xls";
								Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
								int lastrow=TestData.getLastRow("NewLoan");
								String sheetName="NewLoan";
								
								System.out.println(lastrow);
								for(int row=2;row<=lastrow;row++)
								{
									String RunFlag = TestData.getCellData(sheetName,"Run",row);

								if(RunFlag.equals("Y"))
								{	

										String AppURL = TestData.getCellData(sheetName,"AppURL",row);
										String UserName = TestData.getCellData(sheetName,"UserName",row);
										String Password = TestData.getCellData(sheetName,"Password",row);
								        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
								        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
								        String StateID = TestData.getCellData(sheetName,"StateID",row);
								        String SSN = TestData.getCellData(sheetName,"SSN",row);	
								        String Header = StateID+ "_" + ProductID;
								        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
										String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

										test = reports.startTest(Header+"_S.No:55"+"_"+PayFrequency+"_"+CollateralType,"Loan >Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Cure end date>Full default amount > Void");

								         Assert.assertTrue(true);
								         appUrl = AppURL;
								         
		                                 Login.Login(UserName, Password, StoreId);
					                     RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
								         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
								         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
								         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
								         EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
								         Default_Payment_ILP.Default_Payment_ILP(SSN, FileName, 1);
								         Void_Default_Payment_ILP.Void_Default_Payment_ILP(SSN, FileName);						        
								         //History.History(SSN, FileName);
								         Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
								     
					                    
								 }
								
								}	
							}
			
			 
			 @Test (priority=53,groups = "leela_OH_ILP")
				
				public void CO_ILP_Loan_DefaulPartialPayment_EncryptionVoid() throws Exception {
									
									
										// Start test. Mention test script name
										String FileName= "AA_CO_ILP_Loan_DefaultPartialPayment_Encryption_Testdata.xls";
										Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
										int lastrow=TestData.getLastRow("NewLoan");
										String sheetName="NewLoan";
										
										System.out.println(lastrow);
										
										for(int row=2;row<=lastrow;row++)
										{
											String RunFlag = TestData.getCellData(sheetName,"Run",row);

										if(RunFlag.equals("Y"))
										{	

												String AppURL = TestData.getCellData(sheetName,"AppURL",row);
												String UserName = TestData.getCellData(sheetName,"UserName",row);
												String Password = TestData.getCellData(sheetName,"Password",row);
										        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
										        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
										        String StateID = TestData.getCellData(sheetName,"StateID",row);
										        String SSN = TestData.getCellData(sheetName,"SSN",row);	
										        String Header = StateID+ "_" + ProductID;
										        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
												String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

												test = reports.startTest(Header+"_S.No:56"+"_"+PayFrequency+"_"+CollateralType,"Laon>Run EOD batch process on 1# due date>Run EOD Batch process(due date+10 days)>Run EOD batch process on Cure end date>partial default amount>void on next day of the payment (with all possible tender types)");

										         Assert.assertTrue(true);
										         appUrl = AppURL;
										         
										         			
										         Login.Login(UserName, Password, StoreId);
							                     RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
										         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
										         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
										         EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
										         EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
										         Default_Payment_ILP.Default_Payment_ILP(SSN, FileName, 0.5);
										         
										         AgeStore_ILP_DEF.AgeStore_ILP_DEF(SSN, FileName, 1);								        
										         Default_Payment_EncryptionKey_Void.Default_Payment_EncryptionKey_Void(SSN, FileName);
										       
										        // History.History(SSN, FileName);
										     
							                     
										 }
										
										}	
									}
			 
			 
			 @Test (priority=54,groups = "leela_OH_ILP") // Leela 

				public void LonI_DFLT_EODbatchprocess_DFLTPLUS60() throws Exception {

					// Start test. Mention test script name
					String FileName= "AA_LonI_DFLT_EODbatchprocess_DFLTPLUS60_Txn_TestData.xls";		 
					Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
					int lastrow=TestData.getLastRow("NewLoan");
					String sheetName="NewLoan";
					System.out.println(lastrow);
					for(int row=2;row<=lastrow;row++)
					{
						String RunFlag = TestData.getCellData(sheetName,"Run",row);
						//System.out.println(RunFlag);
						if(RunFlag.equals("Y"))
						{	
							//driver.get(appUrl);
							//test.log(LogStatus.INFO, "Application is launched");
							//driver.manage().window().maximize();
							String AppURL = TestData.getCellData(sheetName,"AppURL",row);
							String UserName = TestData.getCellData(sheetName,"UserName",row);
							String Password = TestData.getCellData(sheetName,"Password",row);
							// System.out.println(Password);
							String StoreId = TestData.getCellData(sheetName,"StoreID",row);
							String ProductID = TestData.getCellData(sheetName,"ProductID",row);
							String StateID = TestData.getCellData(sheetName,"StateID",row);
							String SSN = TestData.getCellData(sheetName,"SSN",row);
							String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
							String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
							String Header = StateID+ "_" + ProductID;      		        
							test = reports.startTest(Header+"_S.No:57"+"_"+PayFrequency+"_"+CollateralType,"Loan>default>Run EOD batch process(default date+60 days)");
							appUrl = AppURL;

							Login.Login(UserName, Password, StoreId);			        
							
							RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
							NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");				
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
							//Apportions_List.Apportions_List(SSN, FileName, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 91, 2);
							//Apportions_List.Apportions_List(SSN, FileName, 2);
							Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
						}
					}

				}
			 
			
			 @Test (priority=55,groups = "leela_OH_ILP") // Leela  

				public void LonI_DFLT_Pymt_15percentofDFLTamt_EODbatchprocess_DFLTPLUS120() throws Exception {

					// Start test. Mention test script name
					String FileName= "LonI_DFLT_Pymt_15percentofDFLTamt_EODbatchprocess_DFLTPLUS120.xls";		 
					Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
					int lastrow=TestData.getLastRow("NewLoan");
					String sheetName="NewLoan";
					System.out.println(lastrow);
					for(int row=2;row<=lastrow;row++)
					{
						String RunFlag = TestData.getCellData(sheetName,"Run",row);
						//System.out.println(RunFlag);
						if(RunFlag.equals("Y"))
						{	
							//driver.get(appUrl);
							//test.log(LogStatus.INFO, "Application is launched");
							//driver.manage().window().maximize();
							String AppURL = TestData.getCellData(sheetName,"AppURL",row);
							String UserName = TestData.getCellData(sheetName,"UserName",row);
							String Password = TestData.getCellData(sheetName,"Password",row);
							// System.out.println(Password);
							String StoreId = TestData.getCellData(sheetName,"StoreID",row);
							String ProductID = TestData.getCellData(sheetName,"ProductID",row);
							String StateID = TestData.getCellData(sheetName,"StateID",row);
							String SSN = TestData.getCellData(sheetName,"SSN",row);
							String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
							String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
							String Header = StateID+ "_" + ProductID;      		        
							test = reports.startTest(Header+"_S.No:58"+"_"+PayFrequency+"_"+CollateralType,"Loan>default>payment(15% of default payment)Run EOD batch process(default date+120 days)");
							appUrl = AppURL;

							Login.Login(UserName, Password, StoreId);			        
							
							RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
							NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");	
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
							Payment_PercentofDFLTAmt.Payment_PercentofDFLTAmt(SSN, FileName, 0.15);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
							//History.History1(SSN, FileName);
							Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
						}
					}

				}
			 
			 @Test (priority=56,groups = "leela_OH_ILP") // Leela 

				public void LonI_DFLT_Pymt_20percentofDFLTamt_EODbatchprocess_DFLTPLUS60() throws Exception {

					// Start test. Mention test script name
					String FileName= "LonI_DFLT_Pymt_20percentofDFLTamt_EODbatchprocess_DFLTPLUS60.xls";		 
					Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
					int lastrow=TestData.getLastRow("NewLoan");
					String sheetName="NewLoan";
					System.out.println(lastrow);
					for(int row=2;row<=lastrow;row++)
					{
						String RunFlag = TestData.getCellData(sheetName,"Run",row);
						//System.out.println(RunFlag);
						if(RunFlag.equals("Y"))
						{	
							//driver.get(appUrl);
							//test.log(LogStatus.INFO, "Application is launched");
							//driver.manage().window().maximize();
							String AppURL = TestData.getCellData(sheetName,"AppURL",row);
							String UserName = TestData.getCellData(sheetName,"UserName",row);
							String Password = TestData.getCellData(sheetName,"Password",row);
							// System.out.println(Password);
							String StoreId = TestData.getCellData(sheetName,"StoreID",row);
							String ProductID = TestData.getCellData(sheetName,"ProductID",row);
							String StateID = TestData.getCellData(sheetName,"StateID",row);
							String SSN = TestData.getCellData(sheetName,"SSN",row);
							String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
							String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
							String Header = StateID+ "_" + ProductID;      		        
							test = reports.startTest(Header+"_S.No:59"+"_"+PayFrequency+"_"+CollateralType,"Loan>default>payment(15% of default payment)Run EOD batch process(default date+120 days)");
							appUrl = AppURL;

							Login.Login(UserName, Password, StoreId);			        
							
							RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
							NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");		
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
							Payment_PercentofDFLTAmt.Payment_PercentofDFLTAmt(SSN, FileName, 0.20);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 91, 2);				
							Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
						}
					}

				}
			 
			 @Test (priority=57,groups = "leela_OH_ILP")

			 public void Loan_DFLT_30PerDFLTPmt_void_EODBatchProcessDFLTdate60days_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_Loan_DFLT_30PerDFLTPmt_void_EODBatchProcessDFLTdate60days_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:60"+"_"+PayFrequency+"_"+CollateralType, "Loan_default_payment(30% of default payment)_void_Run EOD batch process(default date+60 days)");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");


			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	   
			 	
			 	      //  EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	       EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        //History.History(SSN, FileName);
			 	        Default_Payment_ILP.Default_Payment_ILP(SSN, FileName, 0.3);
			 	        //History.History(SSN, FileName);
			 	        DefaultPmt_Void_ILP.DefaultPmt_Void_ILP(SSN, FileName);
			 	       // History.History(SSN, FileName);
			 	        EOD_BatchProcess_WO.EOD_BatchProcess_WO(SSN, FileName, 60);
			 	       // History.History(SSN, FileName);
  		        		        	        	        
			 	}
			 	}
			 	

			}

		 @Test (priority=58,groups = "leela_OH_ILP")

			 public void Loan_DFLT_WO_WORecFullWithAllTenderTypes_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_Loan_DFLT_WO_WORecFullWithAllTenderTypes_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:61"+"_"+PayFrequency+"_"+CollateralType, "Laon_default_write off_writeoff recovery(full amount)(with all possible tender types)");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	   
			 	       EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
			 	      //  EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	    
			 	       // History.History(SSN, FileName);
			 	        
			 	        EOD_BatchProcess_WO.EOD_BatchProcess_WO(SSN, FileName, 60);
			 	      //  History.History(SSN, FileName);
			 	        Writoff_RecoveryFull_ILP.Writoff_RecoveryFull_ILP(SSN, FileName);
			 	     //   History.History(SSN, FileName);
	 	}
	}
			 	

		}
 	

		 @Test (priority=59,groups = "leela_OH_ILP")

			 public void Loan_DFLT_WO_WORecPartPmtWithAllTenderTypes_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_Loan_DFLT_WO_WORecPartPmtWithAllTenderTypes_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:62"+"_"+PayFrequency+"_"+CollateralType, "Laon_default_write off_writeoff recovery(partial amount)(with all possible tender types)");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");

			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	   
			 	
			 	       // EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	       EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	    
			 	    //    History.History(SSN, FileName);
			 	        EOD_BatchProcess_WO.EOD_BatchProcess_WO(SSN, FileName, 60);
			 	      //  History.History(SSN, FileName);

			 	        Writoff_RecoveryPartPmt_ILP.Writoff_RecoveryPartPmt_ILP(SSN, FileName);

			 	     //   History.History(SSN, FileName);
			 	       	        
			 	       
			 	       		        		        	        	        
			 	}
			 	}
			 	

			}		 
			 
			 @Test (priority=60,groups = "leela_OH_ILP")

			 public void Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:63"+"_"+PayFrequency+"_"+CollateralType, "Laon_default_write off_writeoff recovery(full amount)_Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes_Void(with all possible tender types)");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");


			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	   
			 	
			 	      //  EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	       EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	    
			 	      //  History.History(SSN, FileName);
			 	        EOD_BatchProcess_WO.EOD_BatchProcess_WO(SSN, FileName, 60);

			 	     //  History.History(SSN, FileName);
			 	        Writoff_RecoveryFull_ILP.Writoff_RecoveryFull_ILP(SSN, FileName);
			 	

			 	        Void_WO.Void_WO(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	    //    History.History(SSN, FileName);
			 	       	        
			 	       
			 	       		        		        	        	        
			 	}
			 	}
			 	

			 		}
			 
			 @Test (priority=61,groups = "leela_OH_ILP") 

			 public void Loan_DFLT_WO_WORecPartPmt_VoidNextDay() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_Loan_DFLT_WO_WORecPartPmt_VoidNextDay_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:64"+"_"+PayFrequency+"_"+CollateralType, "Laon_default_write off_writeoff recovery(partial amount)_void on next day(with all possible tender types)");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");

			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	   
			 	
			 	      //  EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	       EOD_BatchProcess_DueDate_DFLT.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	    
			 	     //   History.History(SSN, FileName);
			 	        EOD_BatchProcess_WO.EOD_BatchProcess_WO(SSN, FileName, 60);
			 	      //  History.History(SSN, FileName);

			 	        Writoff_RecoveryPartPmt_ILP.Writoff_RecoveryPartPmt_ILP(SSN, FileName);
			 	        AgeStore_AfterWO.AgeStore_AfterWO(SSN, FileName, 61);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	     //   History.History(SSN, FileName);
			 	       
			 	        EncryptionKey_Void_WORec.EncryptionKey_Void_WORec(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);       
			 	       
			 	       		        		        	        	        
			 	}
			 	}
			 	

			 		}

	 
		 @Test (priority=62,groups = "leela_OH_ILP")  //Leela

			 public void DFLTLoan_EPPConvert_PpayAllInst_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_DFLTLoan_EPPConvert_PpayAllInst_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:65"+"_"+PayFrequency+"_"+CollateralType, "Pick anILP Loan which is default status _ Convert to EPP _ PPAY all installments accordingly before due date");
			 	        appUrl = AppURL;

			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
			            EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	        EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        RCC_Revoke.RCC_Revoke(SSN, FileName);
			 	        EPP_ILP.EPP_ILP(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 5);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 6);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);

			 	       		        		        	        	        
			 	}
			 	}

			}
			 
			 
	 @Test (priority=63,groups = "leela_OH_ILP")// - Need to execute last

			 public void DFLTLoan_EPPConvert_DepositAll_ClearAll_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_DFLTLoan_EPPConvert_DepositAll_ClearAll_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:66"+"_"+PayFrequency+"_"+CollateralType, "Pick an ILP Loan which is default status _ Convert to EPP _ Deposit all installments on due date accordingly and clear them");
			 	        appUrl = AppURL;
			 	        
			 	        
			 	       SetCurrentDate.SetCurrentDate(SSN, FileName);
			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
			 	        
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	        EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        RCC_Revoke.RCC_Revoke(SSN, FileName);
			 	        EPP_ILP.EPP_ILP(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);

			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 2);     			
			 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
			 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
			 	        StoreInfo.StoreInfo(SSN, FileName);
			 	        Safeassign.Safeassign(SSN, FileName);
			 	        Drawerassign.Drawerassign(SSN, FileName);
			 	        Payliance_OriginationFile_PPN.Payliance_OriginationFile_PPN(SSN, FileName, -1,2);
			 	        ACH_Deposit_RPP_ILP.ACH_Deposit_RPP_ILP(SSN, FileName, 0,2);
			 	        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 10, 2);
			 	     //   Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);

			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 3);			
			 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
			 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
			 	        StoreInfo.StoreInfo(SSN, FileName);
			 	        Safeassign.Safeassign(SSN, FileName);
			 	        Drawerassign.Drawerassign(SSN, FileName);
			 	        Payliance_OriginationFile_PPN.Payliance_OriginationFile_PPN(SSN, FileName, -1,3);
			 	        ACH_Deposit_RPP_ILP.ACH_Deposit_RPP_ILP(SSN, FileName, 0,3);
			 	        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 9, 3);
			 	      //  Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
			 	        
			 	        
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 4); 			
			 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
			 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
			 	        StoreInfo.StoreInfo(SSN, FileName);
			 	        Safeassign.Safeassign(SSN, FileName);
			 	        Drawerassign.Drawerassign(SSN, FileName);
			 	        Payliance_OriginationFile_PPN.Payliance_OriginationFile_PPN(SSN, FileName, -1,4);
			 	        ACH_Deposit_RPP_ILP.ACH_Deposit_RPP_ILP(SSN, FileName, 0,4);
			 	        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 9, 4);
			 	    //    Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
			 	       Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 5); 			
			 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
			 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
			 	        StoreInfo.StoreInfo(SSN, FileName);
			 	        Safeassign.Safeassign(SSN, FileName);
			 	        Drawerassign.Drawerassign(SSN, FileName);
			 	        Payliance_OriginationFile_PPN.Payliance_OriginationFile_PPN(SSN, FileName, -1,5);
			 	        ACH_Deposit_RPP_ILP.ACH_Deposit_RPP_ILP(SSN, FileName, 0,5);
			 	        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 9, 5);
			 	      //  Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 6); 			
			 	        DrawerDeassign.DrawerDeassign(SSN, FileName);
			 	        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
			 	        StoreInfo.StoreInfo(SSN, FileName);
			 	        Safeassign.Safeassign(SSN, FileName);
			 	        Drawerassign.Drawerassign(SSN, FileName);
			 	        Payliance_OriginationFile_PPN.Payliance_OriginationFile_PPN(SSN, FileName, -1,6);
			 	        ACH_Deposit_RPP_ILP.ACH_Deposit_RPP_ILP(SSN, FileName, 0,6);
			 	        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 9, 6);
			 	     //   Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	}
			 	}
			 	

			}

			 @Test (priority=64,groups = "leela_OH_ILP")

			 public void DFLTLoan_EPPConvert_PpayAllInst_VoidLastInst_() throws Exception {

			 	// Start test. Mention test script name
			 	String FileName= "AA_DFLTLoan_EPPConvert_PpayAllInst_VoidLastInst_TestData.xls";
			 	Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
			 	int lastrow=TestData.getLastRow("NewLoan");
			 	String sheetName="NewLoan";   
			 	//int lastrow=TestData.getLastRow("Borrower");
			 	System.out.println(lastrow);
			 	for(int row=2;row<=lastrow;row++)
			 	{
			 		String RunFlag = TestData.getCellData(sheetName,"Run",row);
			 		//System.out.println(RunFlag);
			 	if(RunFlag.equals("Y"))
			 	{	
			 		//driver.get(appUrl);
			 		//test.log(LogStatus.INFO, "Application is launched");
			 		//driver.manage().window().maximize();
			 			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			 			String UserName = TestData.getCellData(sheetName,"UserName",row);
			 			String Password = TestData.getCellData(sheetName,"Password",row);
			 	       // System.out.println(Password);
			 	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
			 	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
			 	        String StateID = TestData.getCellData(sheetName,"StateID",row);
			 	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
			 	        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			 			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			 	        String Header = StateID+ "_" + ProductID;
			 	        //System.out.println(SSN);
			 	        test = reports.startTest(Header+"_S.No:67"+"_"+PayFrequency+"_"+CollateralType, "Pick an ILP Loan which is default status_ Convert to EPP _ PPAY all installments accordingly before due date _void last installment payment");
			 	        appUrl = AppURL;
			 	        
			 	       SetCurrentDate.SetCurrentDate(SSN, FileName);
			 	        
			 	        Login.Login(UserName, Password, StoreId);
			 	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
			 	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
			            EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0,2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			 	        EOD_BatchProcess_Default.EOD_BatchProcess_Default(SSN, FileName, 2);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        RCC_Revoke.RCC_Revoke(SSN, FileName);
			 	        EPP_ILP.EPP_ILP(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
			 	        RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	        RPP_Payment_Void.RPP_Payment_Void(SSN, FileName);
			 	        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
			 	       		        		        	        	        
			 	}
			 	}
		}
			 
			 //Scenarios 68 to 75 were blocked
			
			 
			 @Test (priority=65,groups = "leela_OH_ILP") //Not Required - Duplicate

				public void LonI_DFLT_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate() throws Exception {

					// Start test. Mention test script name
					String FileName= "LonI_DFLT_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate.xls";		 
					Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
					int lastrow=TestData.getLastRow("NewLoan");
					String sheetName="NewLoan";
					System.out.println(lastrow);
					for(int row=2;row<=lastrow;row++)
					{
						String RunFlag = TestData.getCellData(sheetName,"Run",row);
						//System.out.println(RunFlag);
						if(RunFlag.equals("Y"))
						{	
							//driver.get(appUrl);
							//test.log(LogStatus.INFO, "Application is launched");
							//driver.manage().window().maximize();
							String AppURL = TestData.getCellData(sheetName,"AppURL",row);
							String UserName = TestData.getCellData(sheetName,"UserName",row);
							String Password = TestData.getCellData(sheetName,"Password",row);
							// System.out.println(Password);
							String StoreId = TestData.getCellData(sheetName,"StoreID",row);
							String ProductID = TestData.getCellData(sheetName,"ProductID",row);
							String StateID = TestData.getCellData(sheetName,"StateID",row);
							String SSN = TestData.getCellData(sheetName,"SSN",row);
							String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
							String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
							String Header = StateID+ "_" + ProductID;      		        
							test = reports.startTest(Header+"_S.No:76"+"_"+PayFrequency+"_"+CollateralType,"Pick an ILP Loan which is default status -> PPN=>1# paymnet >void >Run EOD batch process on 35 days from the due dateNOTE:In between 1# due date to 35 days if 2# is there then that amount should be missed payment)");
							appUrl = AppURL;

							Login.Login(UserName, Password, StoreId);			        
							
							RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
							NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");				
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);				
							//History.History(SSN, FileName);	
							RCC_Revoke.RCC_Revoke(SSN, FileName);
							RPP.RPP(SSN, FileName);
							AgeStore_EPP.AgeStore_EPP(SSN, FileName, 0, 2);
							RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
							Void_PaymentPlanPayment.Void_PaymentPlanPayment(SSN, FileName);
							AgeStore_EPP.AgeStore_EPP(SSN, FileName, 35, 2);
							EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);

					      
				
						}
					}

				}

			 //Scenarios 77 and 78 were blocked
			 

@Test(priority=66,groups = "leela_OH_ILP") //Not Required - Duplicate

public void Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate() throws Exception {
	
	// Start test. Mention test script name
	String FileName= "AA_Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate_Testdata.xls";
	Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);  	
	int lastrow=TestData.getLastRow("NewLoan");
	String sheetName="NewLoan";

	//int lastrow=TestData.getLastRow("Borrower");
	System.out.println(lastrow);
	for(int row=2;row<=lastrow;row++)
	{
		String RunFlag = TestData.getCellData(sheetName,"Run",row);
		//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
			
		
		    String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			String UserName = TestData.getCellData(sheetName,"UserName",row);
			String Password = TestData.getCellData(sheetName,"Password",row);
	       // System.out.println(Password);
	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
	        String StateID = TestData.getCellData(sheetName,"StateID",row);
	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
	        String Header = StateID+ "_" + ProductID;
	        //System.out.println(SSN);
	        test = reports.startTest(Header+"_S.No:79"+"_"+PayFrequency+"_"+CollateralType,"Pick anILP Loan which is writeoff status_Convert to EPP_PPAY all installments accordingly before due date");
	        appUrl = AppURL;
	        Login.Login(UserName, Password, StoreId);
	        
	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
	        NewLoan_ILP_NegAmt_Monthly.NewLoan_ILP_NegAmt_Monthly(SSN, FileName, "100");
	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
			EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);				
            EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
            EPP_ILP.EPP_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 5);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
            
	}       
	}
	

}

@Test (priority=67,groups = "leela_OH_ILP") // need to run last

public void Pick_ILP_WriteOff_ConvertEpp_DepositAllinstOnduedate_Clear() throws Exception {

// Start test. Mention test script name
String FileName= "AA_Pick_ILP_WriteOff_ConvertEpp_DepositAllinstOnduedate_Clear_Testdata.xls";
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);  	
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";

//int lastrow=TestData.getLastRow("Borrower");
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
if(RunFlag.equals("Y"))
{	
	//driver.get(appUrl);
	//test.log(LogStatus.INFO, "Application is launched");
	//driver.manage().window().maximize();
		
	
	    String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
       // System.out.println(Password);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String Header = StateID+ "_" + ProductID;
        //System.out.println(SSN);
        test = reports.startTest(Header+"_S.No:80"+"_"+PayFrequency+"_"+CollateralType,"Pick anILP Loan which is writeoff status_Convert to EPP_PPAY all installments accordingly before due datePick an ILP Loan which is writeoff status_Convert to EPP_Deposit all installments on due date accordingly and clear them");
        appUrl = AppURL;
        Login.Login(UserName, Password, StoreId);
        
        //SetCurrentDate.SetCurrentDate(SSN, FileName);
        
       RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
       NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
        RCC_Revoke.RCC_Revoke(SSN, FileName);
        EPP_ILP.EPP_ILP(SSN, FileName);
        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
        
        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 2);
        DrawerDeassign.DrawerDeassign(SSN, FileName);
        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);
        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1, 2);
        ACH_Deposit.ACH_Deposit(SSN, FileName, 0, 2);
        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 2);
    //    Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
        
        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 3);
        DrawerDeassign.DrawerDeassign(SSN, FileName);
        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);
        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1, 3);
        ACH_Deposit.ACH_Deposit(SSN, FileName, 0, 3);
        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 3);
     //   Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
        
        AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -1, 4);
        DrawerDeassign.DrawerDeassign(SSN, FileName);
        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);
        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1, 4);
        ACH_Deposit.ACH_Deposit(SSN, FileName, 0, 4);
        EOD_BatchProcess_EPPDueDate.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 4);
   //     Check_TransactionRecords.Check_TransactionRecords(SSN, FileName);
       
        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
       
}       
}


}



@Test (priority=68,groups = "leela_OH_ILP") 

public void Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate_Void() throws Exception {
	
	// Start test. Mention test script name
	String FileName= "AA_Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate_Void_Testdata.xls";
	Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);  	
	int lastrow=TestData.getLastRow("NewLoan");
	String sheetName="NewLoan";

	//int lastrow=TestData.getLastRow("Borrower");
	System.out.println(lastrow);
	for(int row=2;row<=lastrow;row++)
	{
		String RunFlag = TestData.getCellData(sheetName,"Run",row);
		//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
			
		
		    String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
			String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
			String AppURL = TestData.getCellData(sheetName,"AppURL",row);
			String UserName = TestData.getCellData(sheetName,"UserName",row);
			String Password = TestData.getCellData(sheetName,"Password",row);
	       // System.out.println(Password);
	        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
	        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
	        String StateID = TestData.getCellData(sheetName,"StateID",row);
	        String SSN = TestData.getCellData(sheetName,"SSN",row);	
	        String Header = StateID+ "_" + ProductID;
	        //System.out.println(SSN);
	        test = reports.startTest(Header+"_S.No:81"+"_"+PayFrequency+"_"+CollateralType,"Pick anILP Loan which is writeoff status_Convert to EPP_PPAY all installments accordingly before due date");
	        appUrl = AppURL;
	        
	        SetCurrentDate.SetCurrentDate(SSN, FileName);
	        Login.Login(UserName, Password, StoreId);
	        
	        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
	        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
	        EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
			EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
			EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);				
            EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
            RCC_Revoke.RCC_Revoke(SSN, FileName);
            EPP_ILP.EPP_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            AgeStore_RPP_ILP.AgeStore_RPP_ILP(SSN, FileName, -4, 5);
            RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
            Void_Afterallinstallment.Void_Afterallinstallment(SSN, FileName);
            Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
            
	}       
	}
	

}

//Scenarios Blocked from 82 to 89

@Test (priority=69,groups = "leela_OH_ILP")

public void LonI_WO_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_WO_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate_Testdata.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:90"+"_"+PayFrequency+"_"+CollateralType,"Pick an LOC Loan which is writeoff status_PPN=>1# paymnet _void _Run EOD batch process on 35 days from the due dateNOTE:In between 1#  due date to 35  days if 2# is there then that  amount should be missed payment))");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");			
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
	//	History.History(SSN, FileName);	
		RCC_Revoke.RCC_Revoke(SSN, FileName);
		RPP.RPP(SSN, FileName);
		AgeStore_EPP.AgeStore_EPP(SSN, FileName, 0, 2);
		RPP_Payment_ILP.RPP_Payment_ILP(SSN, FileName);
		Void_PaymentPlanPayment.Void_PaymentPlanPayment(SSN, FileName);
		AgeStore_EPP.AgeStore_EPP(SSN, FileName, 35, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);

      

	}
}

}

@Test (priority=70,groups = "leela_OH_ILP")  //Leela 

public void Loan_Bankrupt_Void_() throws Exception {

// Start test. Mention test script name
String FileName= "AA_Loan_Bankrupt_Void_TestData.xls";
Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";   
//int lastrow=TestData.getLastRow("Borrower");
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
if(RunFlag.equals("Y"))
{	
	//driver.get(appUrl);
	//test.log(LogStatus.INFO, "Application is launched");
	//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
       // System.out.println(Password);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
        String Header = StateID+ "_" + ProductID;
        //System.out.println(SSN);
        test = reports.startTest(Header+"_S.No:91"+"_"+PayFrequency+"_"+CollateralType, "Loan_Select Void Status from Status dropdown in Bankruptcy Deceased Suite pageEnter all mandatory fields and click on Save");
        appUrl = AppURL;

        
        Login.Login(UserName, Password, StoreId);
        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
        Bankrupt.Bankrupt(SSN, FileName);
        Bankrupt_Void.Bankrupt_Void(SSN, FileName);
        BankruptStatus.BankruptStatus(SSN, FileName);
     
      //  History.History(SSN, FileName);
       		        		        	        	        
}
}


	}

//Scenario 92 - Duplicate

@Test (priority=71,groups = "leela_OH_ILP")  //Not Required - Duplicate

public void Loan_Bankrupt_() throws Exception {

// Start test. Mention test script name
String FileName= "AA_Loan_Bankrupt_TestData.xls";
Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";   
//int lastrow=TestData.getLastRow("Borrower");
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
if(RunFlag.equals("Y"))
{	
	//driver.get(appUrl);
	//test.log(LogStatus.INFO, "Application is launched");
	//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
       // System.out.println(Password);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
        String Header = StateID+ "_" + ProductID;
        //System.out.println(SSN);
        test = reports.startTest(Header+"_S.No:93"+"_"+PayFrequency+"_"+CollateralType, "Loan_Select Bankruptcy Status from Status dropdown in Bankruptcy Deceased Suite page Enter all mandatory fields and click on Save");
        appUrl = AppURL;

        
        Login.Login(UserName, Password, StoreId);
        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
        Bankrupt.Bankrupt(SSN, FileName);
        BankruptStatus.BankruptStatus(SSN, FileName);
     
       // History.History(SSN, FileName, 0);        
}
}


	}
@Test (priority=72,groups = "leela_OH_ILP") //Not Required - Duplicate
public void CO_ILP_Loan_BNK_Void() throws Exception {


// Start test. Mention test script name
String FileName= "AA_COILP_NewLoan_BNK_Void_Testdata.xls";
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";

System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);

if(RunFlag.equals("Y"))
{	

		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String Header = StateID+ "_" + ProductID;
        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

		test = reports.startTest(Header+"_S.No:94"+"_"+PayFrequency+"_"+CollateralType,"Loan–BNK-Void");
         Assert.assertTrue(true);
         appUrl = AppURL;
         
         Login.Login(UserName, Password, StoreId);
         RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
         AgeStore.AgeStore(SSN, FileName, 0);
         Bankrupt.Bankrupt(SSN, FileName);
         Bankrupt_VV.Bankrupt_VV(SSN, FileName);;

}	
}

}	


//@Test (priority=73,groups = "leela_OH_ILP") 

	public void CO_ILP_Loan_first_payment_BNK_Second_deposit() throws Exception {
	
	
		// Start test. Mention test script name
		String FileName= "AA_OH_ILP_Loan_first_payment_BNK_Second_deposit_Testdata.xls";
		Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);

		if(RunFlag.equals("Y"))
		{	

				String AppURL = TestData.getCellData(sheetName,"AppURL",row);
				String UserName = TestData.getCellData(sheetName,"UserName",row);
				String Password = TestData.getCellData(sheetName,"Password",row);
		        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		        String StateID = TestData.getCellData(sheetName,"StateID",row);
		        String SSN = TestData.getCellData(sheetName,"SSN",row);	
		        String Header = StateID+ "_" + ProductID;
		        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"_S.No:95"+"_"+PayFrequency+"_"+CollateralType,"Loan>1 payment > mark customer to BNK>2 deposit");

		         Assert.assertTrue(true);
		         appUrl = AppURL;
		         
               Login.Login(UserName, Password, StoreId);
		         RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		         NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		         AgeStore.AgeStore(SSN, FileName, -4);
		         installmentPayment.installmentPayment(SSN, FileName);
		         Bankrupt.Bankrupt(SSN, FileName);
		         AgeStore_.AgeStore_2ndInstallment(SSN, FileName,0);
		         DrawerDeassign.DrawerDeassign(SSN, FileName);
		         StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
		         StoreInfo.StoreInfo(SSN, FileName);
		         Safeassign.Safeassign(SSN, FileName);
		         Drawerassign.Drawerassign(SSN, FileName);			         
		        
		 }
		
		}	
	}

//@Test (priority=74,groups = "leela_OH_ILP") //leela 

public void LonI_Bnkrupt_Dismissed() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_Bnkrupt_Dismissed_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:96"+"_"+PayFrequency+"_"+CollateralType,"Loan>Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save. 2) Go to Edit bankrupt information >> Click on Go Button and select dismissed from drop down >> enter manditory fields and Clickon save.");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		Bankrupt.Bankrupt(SSN, FileName);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);
		Dismissed_AfterBANKRUPT.Dismissed_AfterBANKRUPT(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);

	}
}

}



//@Test (priority=75,groups = "leela_OH_ILP") //Leela 

public void LonI_Bnkrupt_Deceased() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_Bnkrupt_Deceased_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:97"+"_"+PayFrequency+"_"+CollateralType,"1)Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite pageEnter all manatory fields and click on Save.2) Go to Edit bankrupt information >> Click on Go Button and select deaceased from drop down >> enter manditory fields andClick on save.");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		Bankrupt.Bankrupt(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		Deceased_AfterBANKRUPT_leela.Deceased_AfterBANKRUPT_leela(SSN, FileName, 6);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);

	}
}

}

//@Test (priority=76,groups = "leela_OH_ILP") //Leela 


public void LonI_Bnkrupt_Discharge() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_Bnkrupt_Discharge_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:98"+"_"+PayFrequency+"_"+CollateralType,"1)Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save.2) Go to Edit bankrupt information >> Click on Go Button and select Discharge from drop down >> enter manditory fields and Clickon save.");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		Bankrupt.Bankrupt(SSN, FileName);
		Discharge_AfterBANKRUPT.Discharge_AfterBANKRUPT(SSN, FileName, 6);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);

	}
}

}

//@Test (priority=77,groups = "leela_OH_ILP") //Leela 

public void LonI_Deceased() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_Deceased_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:99"+"_"+PayFrequency+"_"+CollateralType,"Select 'deceased' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		Deceased.Deceased(SSN, FileName);
		Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
		//Customer_Status.Customer_Status(SSN, FileName);
	}
}

}

//@Test (priority=78,groups = "leela_OH_ILP") //Leela 

public void LonI_DFLT_PPN_BNK_1InstDeposit() throws Exception {

// Start test. Mention test script name
String FileName= "LonI_DFLT_PPN_BNK_1InstDeposit.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:100"+"_"+PayFrequency+"_"+CollateralType,"Loan>default>payment(15% of default payment)Run EOD batch process(default date+120 days)");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");				
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
		EOD_BatchProcess_DueDate.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);				
		//History.History(SSN, FileName);
		RCC_Revoke.RCC_Revoke(SSN, FileName);
		EPP_ILP.EPP_ILP(SSN, FileName);			
		Bankrupt.Bankrupt(SSN, FileName);
		AgeStore_EPP.AgeStore_EPP(SSN, FileName, -1, 2);				
		DrawerDeassign.DrawerDeassign(SSN, FileName);
		EODProcessing_with_recordsChecking.EODProcessing_with_recordsChecking(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);
      

	}
}

}

//@Test (priority=79,groups = "leela_OH_ILP")   //Leela

public void Loan_1stpayment_activemilitary_2ndpayment_() throws Exception {

// Start test. Mention test script name
String FileName= "AA_Loan_1stpayment_activemilitary_2ndpayment_TestData.xls";
Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";   
//int lastrow=TestData.getLastRow("Borrower");
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
if(RunFlag.equals("Y"))
{	
	//driver.get(appUrl);
	//test.log(LogStatus.INFO, "Application is launched");
	//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
       // System.out.println(Password);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
        String Header = StateID+ "_" + ProductID;
        //System.out.println(SSN);
        test = reports.startTest(Header+"_S.No:101"+"_"+PayFrequency+"_"+CollateralType, "Loan_1st Inst payment_active military_2nd Inst payment");
        appUrl = AppURL;

        
        Login.Login(UserName, Password, StoreId);
        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);

        NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
        AgeStore_ILP.AgeStore_ILP(SSN, FileName, -3, 2);
        Payment_ILP.Payment_ILP(SSN, FileName);
        Active_Military_Start.Active_Military_Start(SSN, FileName);
        
        AgeStore_ILP.AgeStore_ILP(SSN, FileName, -3, 3);
        Payment_ILP.Payment_ILP(SSN, FileName);
        Loan_Balance_Status.Loan_Balance_Status(SSN, FileName);
       
       // History.History(SSN, FileName, 0); 	        
}
}


	}

//@Test (priority=80,groups = "leela_OH_ILP")  //Leela

public void BorrowerRegistration_ActiveMilitary_NewLoanNotProcessed_() throws Exception {

// Start test. Mention test script name
String FileName= "AA_BorrowerRegistration_ActiveMilitary_NewLoanNotProcessed_TestData.xls";
Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/OH_ILP/"+FileName);  
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";   
//int lastrow=TestData.getLastRow("Borrower");
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
if(RunFlag.equals("Y"))
{	
	//driver.get(appUrl);
	//test.log(LogStatus.INFO, "Application is launched");
	//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
       // System.out.println(Password);
        String StoreId = TestData.getCellData(sheetName,"StoreID",row);
        String ProductID = TestData.getCellData(sheetName,"ProductID",row);
        String StateID = TestData.getCellData(sheetName,"StateID",row);
        String SSN = TestData.getCellData(sheetName,"SSN",row);	
        String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
        String Header = StateID+ "_" + ProductID;
        //System.out.println(SSN);
        test = reports.startTest(Header+"_S.No:102"+"_"+PayFrequency+"_"+CollateralType, "Loan_1st Inst payment_active military_2nd Inst payment");
        appUrl = AppURL;

       /* 
        Login.Login(UserName, Password, StoreId);
        RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);*/
        
        
        
        Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
        Active_Military_Start.Active_Military_Start(SSN, FileName);
        Check_NewLoan_ILP.Check_NewLoan_ILP(SSN, FileName);        
}
}


	}


//@Test (priority=81,groups = "leela_OH_ILP") //Not Required - Duplicate

public void LonI_IstInstPayment_ACTM_ACTMEnd_2ndInstpymt_Verify_Apportions() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_IstInstPayment_ACTM_ACTMEnd_2ndInstpymt_Verify_Apportions_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:103"+"_"+PayFrequency+"_"+CollateralType,"Loan_age the store date to after rescind period_select payment option from CSR dropdown_Payment screen should show the follwing options  1.Pay Off the balance 2.Pay Installment Am t 3.Pay any other Amt>select pay any other amt_enter Payment amount less than 1# amount");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);			
		Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 2);
		Active_Military_Start.Active_Military_Start(SSN, FileName);
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 2, 2);		
		Active_Military_End.Active_Military_End(SSN, FileName);
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);
		Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 3);
		Apportions_List.Apportions_List(SSN, FileName, row);
		


	}
}

}


//@Test (priority=82,groups = "leela_OH_ILP") //Leela 

public void LonI_IstInstPayment_ACTM_2ndInstDeposit_Verify_Record() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_IstInstPayment_ACTM_2ndInstDeposit_Verify_Record_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:104"+"_"+PayFrequency+"_"+CollateralType,"Loan_age the store date to after rescind period_select payment option from CSR dropdown_Payment screen should show the follwing options  1.Pay Off the balance 2.Pay Installment Am t 3.Pay any other Amt>select pay any other amt_enter Payment amount less than 1# amount");
		appUrl = AppURL;
		
		SetCurrentDate.SetCurrentDate(SSN, FileName);
		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);			
		Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 2);
		Apportions_List.Apportions_List(SSN, FileName, 2);
		Active_Military_Start.Active_Military_Start(SSN, FileName);
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);	
		DrawerDeassign.DrawerDeassign(SSN, FileName);
        StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);
        Payliance_OriginationFile.Payliance_OriginationFile(SSN, FileName, -1, 3);
        ACH_Deposit_ILP.ACH_Deposit_ILP(SSN, FileName, 0);				
		//Apportions_List.Apportions_List(SSN, FileName, 3);
		Deposit_Record_Verification.Deposit_Record_Verification(SSN, FileName);


	}
}

}

//@Test (priority=83,groups = "leela_OH_ILP") //Leela 

public void LonI_IstInstPayment_ACTM_ACHRevoke_2ndInstDeposit_Verify_Record() throws Exception {

// Start test. Mention test script name
String FileName= "AA_LonI_IstInstPayment_ACTM_ACHRevoke_2ndInstDeposit_Verify_Record_Txn_TestData.xls";		 
Excel TestData = new Excel(System.getProperty("user.dir")+"/TestData/OH_ILP/"+FileName);
int lastrow=TestData.getLastRow("NewLoan");
String sheetName="NewLoan";
System.out.println(lastrow);
for(int row=2;row<=lastrow;row++)
{
	String RunFlag = TestData.getCellData(sheetName,"Run",row);
	//System.out.println(RunFlag);
	if(RunFlag.equals("Y"))
	{	
		//driver.get(appUrl);
		//test.log(LogStatus.INFO, "Application is launched");
		//driver.manage().window().maximize();
		String AppURL = TestData.getCellData(sheetName,"AppURL",row);
		String UserName = TestData.getCellData(sheetName,"UserName",row);
		String Password = TestData.getCellData(sheetName,"Password",row);
		// System.out.println(Password);
		String StoreId = TestData.getCellData(sheetName,"StoreID",row);
		String ProductID = TestData.getCellData(sheetName,"ProductID",row);
		String StateID = TestData.getCellData(sheetName,"StateID",row);
		String SSN = TestData.getCellData(sheetName,"SSN",row);
		String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
		String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
		String Header = StateID+ "_" + ProductID;      		        
		test = reports.startTest(Header+"_S.No:105"+"_"+PayFrequency+"_"+CollateralType,"Loan_age the store date to after rescind period_select payment option from CSR dropdown_Payment screen should show the follwing options  1.Pay Off the balance 2.Pay Installment Am t 3.Pay any other Amt>select pay any other amt_enter Payment amount less than 1# amount");
		appUrl = AppURL;

		Login.Login(UserName, Password, StoreId);			        
		
		RegistrationPage_NewLoan_ILP.RegistrationPage_NewLoan_ILP(driver, test, AppURL, SSN, FileName);
		NewLoan_ILP.NewLoan_ILP(SSN, FileName, "200");
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);			
		Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 2);
		//Apportions_List.Apportions_List(SSN, FileName, 2);
		Active_Military_Start.Active_Military_Start(SSN, FileName);
		ACHRevoke.ACHRevoke(SSN, FileName);
		AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);	
		DrawerDeassign.DrawerDeassign(SSN, FileName);
        EODProcessing_with_recordsChecking.EODProcessing_with_recordsChecking(SSN, FileName);
        StoreInfo.StoreInfo(SSN, FileName);
        Safeassign.Safeassign(SSN, FileName);
        Drawerassign.Drawerassign(SSN, FileName);		       			
		
	


	}
}
}

	}
