package pack;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeClass;
import org.testng.Assert;
import org.testng.AssertJUnit;
import org.testng.ITestResult;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;

import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;

import org.openqa.selenium.support.ui.Select;

import org.openqa.selenium.support.ui.WebDriverWait;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

/*import Test.CO_ILP.Need;
import Test.CO_ILP.scenario;*/
import pack.*;

import bsh.*;
//import scala.collection.Iterator;
//import scala.collection.Set;

//import Pages.HomePage;
//import Pages.LoginPage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.FileWriter;

import java.io.IOException;
import java.io.FileReader;

public class AAsample extends AA_FL_PDL{

	@Test (priority=52)

	public void PartialPayment_ACH_Deposit() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Prenote_Verification_within5businessdays_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
			
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("AEA_Newloan_PartialPayment_Txn_"+Header, "AEA_Newloan_PartialPayment_Txn");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-2);
				LoanPartialPayment.LoanPartialPayment(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				ACH_PrePayment.ACH_PrePayment(SSN, FileName);
				Check_Amount_History.Check_Amount_History1(SSN, FileName);

			}
		}
}

	@Test (priority=53)

	public void Nacha_ACHDepositProcess_ACHReturn() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Nacha_DepositProcess_ReturnPosting_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				//test = reports.startTest("Scenario_No_60_"+Header, "Loan (ACH) -->  Nacha --> Ach Deposit process --> Ach Return posting");
				test = reports.startTest(Header+"_S.No:60"+"_"+PayFrequency+"_"+CollateralType,"Loan (ACH)_Nacha(EOD)_Ach Deposit process_Ach Return posting");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName); 
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);					
				StoreInfo.StoreInfo(SSN, FileName); 
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);

			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=54)

	public void ConvertCheckToACHNacha_ACHDepositProcess_ACHReturn() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_ConvertCheckToACHNacha_DepositProcess_ReturnPosting_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				//test = reports.startTest("Scenario_No_62_"+Header,"Loan (Check) -->  (Convert to ACH) Ach Deposit process --> Ach Return Posting");
				test = reports.startTest(Header+"_S.No:62"+"_"+PayFrequency+"_"+CollateralType,"Loan (Check)_(Convert to ACH) Ach Deposit process_Ach Return Posting");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName); 
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName); 
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName); 
				Drawerassign.Drawerassign(SSN, FileName); 
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
			//	DepositStatus.DepositStatus(SSN, FileName);


				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=55)

	public void Loan_Deposit_PrePayment_Return() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_DepositProcess_PrePayment_ReturnPosting_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				//test = reports.startTest("Scenario_No_64_"+Header,"Loan  --> Age the store  upto duedate --> perform deposit --> age perform the Prepayment--> age the store --> return");
				test = reports.startTest(Header+"_S.No:64"+"_"+PayFrequency+"_"+CollateralType,"Loan_Age the store  upto duedate_perform deposit_age perform the Prepayment_age the store_return");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName); 
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				//StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName); 
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName); 
				ACH_PrePayment.ACH_PrePayment(SSN, FileName);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
				// DepositStatus.DepositStatus(SSN, FileName);


				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=56) 

	public void LoanwithCheck_Deposit_ReturnwithoutR01R09_FutureDepositNotposted() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_NewLoan(check)_Deposit_ReturnPostingwithout(R01R09)_FetureDepositnotPost_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				//test = reports.startTest("Scenario_No_67_"+Header,"loan with check->deposit->return with return reason id other than R01,R09 then should not allow for future deposit");
				test = reports.startTest(Header+"_S.No:67"+"_"+PayFrequency+"_"+CollateralType,"loan with check->deposit_return with return reason id other than R01,R09 then should not allow for future deposit");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName); 
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName); 
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName); 
				ACHReturnPostingWithoutR01R09.ACHReturnPostingWithoutR01R09(SSN, FileName); 
				ACHEffectiveDate_AgeStore.ACHEffectiveDate_AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);  
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				FutureDeposit_RecoredSataus.FutureDeposit_RecoredSataus(SSN, FileName);
				
			}
		}
		
	}
	@Test (priority=57)

	public void LoanwithACH_NACHA_ACHDepProc_ProcessClear() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LoanwithACH_NACHA_ACHDepProc_ProcessClear_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("LoanwithACH_NACHA_ACHDepProc_ProcessClear"+Header, "LoanwithACH__Nacha__AchDepositProcess__ProcessClear");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				// NACHADeposit_EODProcessing.NACHADeposit_EODProcessing(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACHClear_History.ACHClear_History(SSN, FileName);

			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=58)	

	public void NewLoan_PreNoteDeposit_PreNoteClear() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_NewLoan_PreNoteDeposit_PreNoteClearTestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("AA_NewLoan_PreNoteDeposit_PreNoteClear_"+Header, "Loan(ACH/Check)_PreNoteDeposit_PreNoteClear");
				appUrl = AppURL;

				//CustomerEodS_Recoredtatus.CustomerEodS_Recoredtatus(SSN, FileName);
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, -7);
				PrenoteDeposit_6DaysBeforeDuedate.PrenoteDeposit_6DaysBeforeDuedate(SSN, FileName, -7);
				AgeStore.AgeStore(SSN, FileName, -1);
				PrenoteClear_BeforeDuedate.PrenoteClear_BeforeDuedate(SSN, FileName, -1);   
				Clear_Status.Clear_Status(SSN, FileName);
				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=59)

	public void LoanwithCheck_ConverttoACH_ACHDepproc_ProcClear() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LoanwithCheck_ConverttoACH_ACHDepproc_ProcClear_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("LoanwithCheck_ConverttoACH_ACHDepproc_ProcClear"+Header, "LoanWithCheck__ConverttoACH_AchDepositprocess_ProcessClear");
				appUrl = AppURL; 
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACHClear_History.ACHClear_History(SSN, FileName);


			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=60)

	public void Loan_Agestoreduedate_performdepositPrepayment_agestore_ProcessClear() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Agestoreduedate_performdepositPrepayment_agestore_ProcessClear_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_Agestoreduedate_performdeposit_Prepayment_agestore_ProcessClear"+Header, "Loan__Agethestoreuptoduedate__performdeposit__ageperformthePrepayment__agethestore__ProcessClear");
				appUrl = AppURL; 

				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				ACH_PrePayment.ACH_PrePayment(SSN, FileName);
				AgeStore_ACH.AgeStore_ACH(SSN, FileName, 5);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACHClear_History.ACHClear_History(SSN, FileName);


			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=61)

	public void NewLoan_Perform_EPP() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_NewLoan_PartialPayment_throghEOD_CheckDepositdAmount.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("AA_NewLoan_PartialPayment_throghEOD_CheckDepositdAmount"+Header, "NewLoan_PartialPayment_throghEOD_CheckDepositdAmount");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-5);
				Perform_EPP.Perform_EPP(SSN, FileName);			        
			
			}
		}
	}

		@Test (priority=62)

	public void EPP_MissRPPPayment_EOD_Checkbox() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_RPP_MissRPPPayment_EOD_Checkbox_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("RPP_MissRPPPayment_EOD_Checkbox_Txn_"+Header, "RPP_MissRPPPayment_EOD_Checkbox_Txn");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-2);
				RPPPerform.RPPPerform(SSN, FileName);				           
				AgeStore1stinst.AgeStore1stinst(SSN, FileName, 3);
				DrawerDeassign.DrawerDeassign(SSN, FileName);				          
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);

			}
		}
		//Login.Login("CSR353","1234","353");

	}

	@Test (priority=63)

	public void EPP_MissRPPPayment_EOD_Forcefully() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_EPP_MissRPPPayment_EOD_Forcefully_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("EPP_MissRPPPayment_EOD_Forcefully_Txn_"+Header, "Loan-RPP- Miss the EPP Payment --> Age the store to 14 days from RPP due date --> Perform EOD --> Customer record should display in EOD process and should comes out forcefully from RPP.");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-2);
				RPPPerform.RPPPerform(SSN, FileName);				           
				//AgeStore.AgeStore1stinst(SSN, FileName, 2);
				AgeStore2ndinst.AgeStore2ndinst(SSN, FileName, -14);
				DrawerDeassign.DrawerDeassign(SSN, FileName);				          
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);



				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=64)

	public void Newloan_PartialPayment_Deposit_Clear_Refund() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Newloan_PartialPayment_Deposit_Clear_Refund.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("AA_Newloan_PartialPayment_Deposit_Clear_Refund"+Header, "Loan_Partial Payment_Deposit_Clear_Refund");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-6);
				LoanPartialPayment.LoanPartialPayment(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,0);
				// NACHADeposit_EODProcessing.NACHADeposit_EODProcessing(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				StoreInfo.StoreInfo(SSN, FileName); 
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACH_ReFund.ACH_ReFund(SSN, FileName);
				ACH_ReFund_History.ACH_ReFund_History(SSN, FileName);
				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=65)

	public void Loan_Deposit_FullPrePayment_Clear_Refund() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Deposit_FullPrePayment_Clear_Refund_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_Deposit_FullPrePayment_Clear_Refund"+Header, "Loan_Deposit_Pre Payment full _Clear_Refund	");
				appUrl = AppURL; 
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);

				// NACHADeposit_EODProcessing.NACHADeposit_EODProcessing(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				ACH_PrePayment.ACH_PrePayment(SSN, FileName);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACH_ReFund.ACH_ReFund(SSN, FileName);
				ACH_ReFund_History.ACH_ReFund_History(SSN, FileName);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=66)

	public void LoanWithCheck_ConvertAch_AchPrePayment_AchClr_Refund() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LoanWithCheck_ConvertAch_AchPrePayment_AchClr_Refund_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("LoanWithCheck_ConvertAch_AchPrePayment_AchClr_Refund"+Header, "Loan With Check_Deposit (Convert to ACH)_ACH Pre Payment Partially_ACH CLR_Refund");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				ACH_PartialPrePayment.ACH_PartialPrePayment(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 3);
				//ACH_Clear.ACH_Clear(SSN, FileName);
				ACH_Clear_Admin.ACH_Clear_Admin(SSN, FileName);
				ACH_ReFund.ACH_ReFund(SSN, FileName);
				ACH_History_Status.ACH_History_Status(SSN, FileName);

				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
 @Test (priority=67)

	public void NewLoan_ReturnPosting_60days_Writeoff() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_NewLoan_ReturnPosting_60days_Writeoff_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("NewLoan_ReturnPosting_60days_Writeoff_Txn"+Header, "Loan -> Return Posting -> WO Check whether Write off is done 60days from return date.");
				appUrl = AppURL;


				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);						     
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
				writeoff_Process.writeoff_Process(SSN, FileName, 60);					      
				LoanStatus.LoanStatus(SSN, FileName);

			}
		}
		//Login.Login("CSR353","1234","353");

	}

  @Test (priority=68)

	public void Loan_ReturnPosting_15PerofTotalDue__CheckWriteOff120daystoretdate() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_ReturnPosting_15PerofTotalDue__CheckWriteOff120daystoretdate_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_ReturnPosting_15PerofTotalDue__CheckWriteOff120daystoretdate"+Header, "Loan__ReturnPosting___NSFPayment15PercentofTotalDue__WOCheckwhetherWriteoffisdone120daysfromreturndate");
				appUrl = AppURL;


				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				// NewLoan_EODProcessing.NewLoan_EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				// ACH_PartialPrePayment.ACH_PartialPrePayment(SSN, FileName);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
				ACHPayment.ACHPayment(SSN, FileName, 0.15);
				WriteOff.WriteOff(SSN, FileName, 121);
				WriteOff_History.WriteOff_History(SSN, FileName);



			}
		}
		//Login.Login("CSR353","1234","353");

	}

  @Test (priority=69)

	public void Loan_ReturnPosting_NSF15_Void_WO60days_Returndate() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_ReturnPosting_NSF15_Void_WO60days_Returndate_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_ReturnPosting_NSF15_Void_WO60days_Returndate_TestData"+Header, "Loan->Return Posting_NSF Payment 15% of Total Due_Void_WO Check whether Write off is done 60 days from return date.");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
				ACHPayment.ACHPayment(SSN, FileName, 0.15);
				NSF_Void.NSF_Void(SSN, FileName);
				WriteOff.WriteOff(SSN, FileName, 60);
				WriteOff_History.WriteOff_History(SSN, FileName);

				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}
	@Test (priority=70)

	public void Loan_ReturnPosting_30PerofTotalDue__CheckWriteOff180daystoretdate() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_ReturnPosting_30PerofTotalDue__CheckWriteOff180daystoretdate_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_ReturnPosting_30PerofTotalDue__CheckWriteOff180daystoretdate"+Header, "Loan__ReturnPosting___NSFPayment30PercentofTotalDue__WOCheckwhetherWriteoffisdone180daysfromreturndate");
				appUrl = AppURL;


				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				// NewLoan_EODProcessing.NewLoan_EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				// ACH_PartialPrePayment.ACH_PartialPrePayment(SSN, FileName);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);
				ACHPayment.ACHPayment(SSN, FileName, 0.3);
				WriteOff.WriteOff(SSN, FileName, 181);
				WriteOff_History.WriteOff_History(SSN, FileName);



			}
		}
		//Login.Login("CSR353","1234","353");

	}

	@Test (priority=71)

	public void NewLoan_RPP_AgeInstwise_PPPayment() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_NewLoan_Instwise_PerformRPP_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("AA_NewLoan_Instwise_PerformRPP_Txn__"+Header, "AA_NewLoan_Instwise_PerformRPP_Txn");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName,-2);
				RPPPerform.RPPPerform(SSN, FileName);				           
				AgeStore1stinst.AgeStore1stinst(SSN, FileName, 0);
				RPPPayment.RPPPayment(SSN, FileName);
				AgeStore2ndinst.AgeStore2ndinst(SSN, FileName, 0);
				RPPPayment.RPPPayment(SSN, FileName);
				AgeStore3rdinst.AgeStore3rdinst(SSN, FileName, 0);
				RPPPayment.RPPPayment(SSN, FileName);
				AgeStore4rthinst.AgeStore4rthinst(SSN, FileName, 0);
				RPPPayment.RPPPayment(SSN, FileName);
				AgeStore5thinst.AgeStore5thinst(SSN, FileName, 0);
				RPPPayment.RPPPayment(SSN, FileName);  

				//WebDriverWait wait = new WebDriverWait(driver, 10);		        		        		        	       
				//wait(100);
				// RegistrationPage.RegistrationPage(SSN);
			}
		}
		//Login.Login("CSR353","1234","353");

	}


	@Test(priority=72) //// No Test Data for cenario.cenario



	public void NewLoan_DueDate_Holiday_Verification() throws Exception {



		// Start test. Mention test script name

		String FileName= "AA_NewLoan_Duedate_Holiday_Verification_Txn_Testdata.xls";

		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   

		int lastrow=TestData.getLastRow("NewLoan");

		String sheetName="NewLoan";

		//int lastrow=TestData.getLastRow("Borrower");

		System.out.println(lastrow);

		for(int row=2;row<=lastrow;row++)

		{

			String RunFlag = TestData.getCellData(sheetName,"Run",row);

			//System.out.println(RunFlag);

			if(RunFlag.equals("Y"))

			{       

				//driver.get(appUrl);

				//test.log(LogStatus.INFO, "Application is launched");

				//driver.manage().window().maximize();

				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");

				UserName = prop.getProperty("UserName_FL_PDL_srikanth");

				Password = prop.getProperty("Password_FL_PDL_srikanth");

				// System.out.println(Password);

				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");

				String ProductID = TestData.getCellData(sheetName,"ProductID",row);

				String StateID = TestData.getCellData(sheetName,"StateID",row);

				String SSN = TestData.getCellData(sheetName,"SSN",row); 

				String Header = StateID+ "_" + ProductID;

				//System.out.println(SSN);

				test = reports.startTest("BorrowerRegistration_NewLoan_"+Header, "New Loan");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);

			}

		}


	}

	@Test (priority=73)

	public void Loan_Deposit_PrePaymentfull_Return_RefundnotDisplay() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Deposit_PrePaymentfull_Return_RefundnotDisplay_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_FL_PDL_path_srikanth") + FileName);   
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				UserName = prop.getProperty("UserName_FL_PDL_srikanth");
				Password = prop.getProperty("Password_FL_PDL_srikanth");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_FL_PDL_srikanth");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest("Loan_Deposit_PrePaymentfull_Return_RefundnotDisplay_Txn"+Header, "Loan_Deposit_PrePaymentfull_Return_RefundnotDisplay_Txn");
				appUrl = AppURL;
				
				SetCurrentDate.SetCurrentDate(SSN, FileName);				
				Login.Login(UserName,Password,StoreId);
				
				RegistrationPage_NewLoan_PDL.RegistrationPage_NewLoan_PDL(driver, test, AppURL, SSN, FileName);
				NewLoan.NewLoan(SSN, FileName);
				AgeStore.AgeStore(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				//EODProcessing.EODProcessing(SSN, FileName);
				StatementGeneration_EODProcessing.StatementGeneration_EODProcessing(SSN, FileName);
				StoreInfo.StoreInfo(SSN, FileName);						     
				Safeassign.Safeassign(SSN, FileName);
				Drawerassign.Drawerassign(SSN, FileName);
				NACHA.NACHA(SSN, FileName, 0);
				Prepaymentfull.Prepaymentfull(SSN, FileName);
				ACHReturnPosting.ACHReturnPosting(SSN, FileName);						   
				Refund_Status.Refund_Status(SSN, FileName);
			}
		}
		
	}

	

}
