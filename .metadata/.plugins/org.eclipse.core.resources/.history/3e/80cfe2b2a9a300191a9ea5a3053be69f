package pack;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.*;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class sample2 extends AA_TN_LOC {

	@Test (priority=0)

	public void Loan_draw_statment_draw_DLQ_statment() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_statment_Deliquent_statement_Txn_Testdata.xls";
		//TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:01"+"_"+PayFrequency+"_"+CollateralType, "LOCI Cash =>Draw =>Stmnt =>Draw 2 => Draw 3=> EOD on Due Date =>DLQ =>Stmnt2");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
	          	BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.DrawLoan(SSN, FileName,"350");
				this.DrawLoan(SSN, FileName,"350");
				this.AgeStore(SSN, FileName,0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);    
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.StatementGeneration_2(SSN, FileName);
			}
		}
	}
	
	@Test (priority=1,groups = "revathi_TN_LOC")

	public void Loan_statement_Draw_DLQ_Cure_MinPayment_Draw_statment() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_statment_Draw_Deliquent_Cure_MinPayment_Draw_statement_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:02"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Stmnt1 =>  Draw 1  on due date => DLQ =>Cure =>Payment of Min Pmnt Amnt => Draw => Stmnt2");
				// test = reports.startTest("Scenario-NO_1"+Header, "LOCI Cash =>Draw =>Stmnt =>Draw 2 => Draw 3=> EOD on Due Date =>DLQ =>Stmnt2");
				appUrl = AppURL;
				//this.StatementGeneration(SSN, FileName);
				//this.AgeStore(SSN,FileName);         
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName,0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);    
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName); 
				this.AgeStore(SSN, FileName,10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);    
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.PayOffLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);
				//this.StatementGeneration_2(SSN, FileName);


			}
		}


	}

	
	@Test (priority=2,groups = "revathi_TN_LOC")

	public void Loan_Draw_statement_VoidDraw_EOD__Draw_statment() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_VoidDraw_EOD_Draw_statement_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:03"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw On stmnt date => Void Draw => `RUN EOD No deposits should be posted => Draw =>Stmnt2");
				// test = reports.startTest("Scenario-NO_1"+Header, "LOCI Cash =>Draw =>Stmnt =>Draw 2 => Draw 3=> EOD on Due Date =>DLQ =>Stmnt2");
				appUrl = AppURL;
				//this.StatementGeneration(SSN, FileName);
				//this.AgeStore(SSN,FileName);         
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.Agestore_StatementGeneration(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.Void(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);    
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);
			}
		}
	}


@Test (priority=3,groups = "revathi_TN_LOC")

	public void Loan_Draw1_Draw2ACH_statement_Rescind_Draw_EOD_DLQ() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_Draw_statment_Rescind_Draw_EOD_DLQ_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:04"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw 1 => Draw 2 ACH => Stmnt => Rescind => Draw => EOD On Due Date => DLQ ");
				// test = reports.startTest("Scenario-NO_1"+Header, "LOCI Cash =>Draw =>Stmnt =>Draw 2 => Draw 3=> EOD on Due Date =>DLQ =>Stmnt2");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.DrawLoanwithACH(SSN, FileName); 
				this.StatementGeneration_2(SSN, FileName);
				this.Rescind(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);    
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);  
				this.DeliquentPaymentStatus(SSN, FileName); 

			}
		}
	}


	
	@Test (priority=4,groups = "revathi_TN_LOC")

	public void Loan_Draw_statement_Draw_Void_Rescind() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_Draw_Void_Rescind_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:05"+"_"+PayFrequency+"_"+CollateralType,"LOC I Cash =>Draw => Stmnt => Draw 2 =>Void Draw =>Rescind Draw 1");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.DrawLoan(SSN, FileName,"50");
				this.Void(SSN, FileName);  
				this.AgeStore_LoanDate(SSN, FileName, 1);
				this.Rescind(SSN, FileName);
			}
		}
	}

	@Test (priority=5,groups = "revathi_TN_LOC")

	public void Loan_Draw_PartialPMT_MinPayment_EOD() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_PartialPayment_MinPayment_EOD_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:06"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw => Stmnt => Pmnt Partial => Pmnt Min Payment => EOD on Due Date  ");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.PartialPayment(SSN, FileName);
				this.Payments(SSN, FileName);   
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
			}
		}
	}

	
	
	@Test (priority=6,groups = "revathi_TN_LOC")

	public void Loan_Draw_statement_Partialpayment_EOD_DLQ_Cure_Default() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_PartialPayment_EOD_DLQ_Cure_Default_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:07"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw => Stmnt => Pmnt Partial => EOD on Due Date  =>DLQ =>Cure =>Def");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.PartialPayment(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);



			}
		}


	}
	
	
	
	@Test (priority=7,groups = "revathi_TN_LOC")

	public void Loan_Draw_statement_PartialPayment_EOD_DLQ_MinPayment_LoanCurrent_Draw() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_PartialPayment_EOD_DLQ_MinPayment_Loancurrent_Draw_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:08"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw => Stmnt => Pmnt Partial => EOD on Due Date  =>DLQ =>Paymnt MinPayment Amount =>Loan in CURRENT => Draw ");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.PartialPayment(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.Payments(SSN, FileName);
				this.PaymentStatus(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");




			}
		}


	}


	
	@Test (priority=8,groups = "revathi_TN_LOC")

	public void Loan_Draw_statement_Draw_MinPayment_EOD_PartialPayment_statement_Draw() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_Draw_MinPayment_EOD_PartialPayment_statement_Draw_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:09"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash => Draw => Stmnt => Draw => Pmnt Min Pmnt Amnt =>EOD on Due Date => Pmnt Partial =>Stmnt =>Draw");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"150");
				this.StatementGeneration(SSN, FileName); 
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN, FileName, 0); 
				this.MinPayment(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.PartialPayment(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
			}
		}


	}

@Test (priority=9,groups = "revathi_TN_LOC")

	public void Loan_Draw_statment_MinPayment_Void_DLQ_Cure_Default() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_statment_MinPayment_Void_DLQ_Cure_Default_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:10"+"_"+PayFrequency+"_"+CollateralType,"LOCI Cash =>Draw =>Stmnt => Pmnt Min Payment =>On Due Date Void Pmnt => DLQ =>Cure=>DEF");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"150");
				this.StatementGeneration(SSN, FileName); 
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.EncryptionKey_Void(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);



			}
		}


	}

	
	@Test (priority=10,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Draw2_MakePmt_Stmnt_PmtRTN_EODduedate_DLQ() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Draw2_MakePmt_Stmnt_PmtRTN_EODduedate_DLQ_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:15_"+PayFrequency+"_"+CollateralType, "LOC I Cash _Draw _ Draw 2 _ Make Pmnt _Stmnt _ Payment Return _ EOD on Due Date _DLQ");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore_LoanDate(SSN, FileName, 5);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.EncryptionKey_Void(SSN, FileName);
				this.Void_Payment(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);

			}
		}			
	}



/*//-----//@Test (priority=11,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Draw2_Stmnt_Payoff_EODDueDate_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Draw2_Stmnt_Payoff_EODDueDate_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:16_"+PayFrequency+"_"+CollateralType, "LOC I Cash _Draw _ Draw 2 _Stmnt _ Payoff_EOD On Due Date");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);
				this.PayOffLoan(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);


			}
		}			
	}
*/
	//@Test (priority=12,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_Payoff_PayoffVoidDueDate_DLQ_Cure_Payoff_Closure_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_Payoff_PayoffVoidDueDate_DLQ_Cure_Payoff_Closure_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:17_"+PayFrequency+"_"+CollateralType, "LOC I Cash_ Draw _Stmnt _Payoff _ On Due date Void Payoff _ DLQ _ Cure _ Payoff _ Line Closure");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -4);
				this.PayOffLoan(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.EncryptionKey_Void(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName,10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);	
				this.PayOffLoan(SSN, FileName);
				this.Closure(SSN, FileName);



			}
		}			
	}

	//@Test (priority=13,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_PartialPmt_PayoffDueDate_Payoffvoid_DLQ_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_PartialPmt_PayoffDueDate_Payoffvoid_DLQ_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:18_"+PayFrequency+"_"+CollateralType, "LOCI Cash _ Draw _Stmnt _ Pmnt Partial _ On Due Date Payoff _ Void Payoff _DLQ");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -4);
				this.LoanPartialPayment(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.PayOffLoan(SSN, FileName);
				this.Void_Payoff(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);

			}
		}			
	}


	
	/*//------------//@Test (priority=14,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_Payoff_Draw_EODDueDate_Stmnt_Payoff_PayOffVoidDueDate_DLQ_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_Payoff_Draw_EODDueDate_Stmnt_Payoff_PayOffVoidDueDate_DLQ_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:19_"+PayFrequency+"_"+CollateralType, "LOCI Cash _ Draw _ Stmnt _ Payoff _ Draw _ RUN EOD On Due Date _ Stmnt _ Payoff _ On Due Date Void Payoff_DLQ");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -4);
				this.PayOffLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.PayOffLoan(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.EncryptionKey_Void(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);


			}
		}			
	}
	*/
	
	//@Test (priority=15,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_EODDueDate_DLQ_CURE_Payoff_Draw_Stmnt_Pmnt_EOD_DLQ_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_EODDueDate_DLQ_CURE_Payoff_Draw_Stmnt_Pmnt_EOD_DLQ_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:22_"+PayFrequency+"_"+CollateralType, "LOC I Cash _ Draw _ Stmnt _ RUN EOD on Due Date _DLQ _ CURE _Payoff _ Draw _Stmnt _ Make Pmnt _ RUN EOD_DLQ");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.PayOffLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus1(SSN, FileName);
			}
		}			
	}

	/*//----//@Test (priority=16,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_EOD_DLQ_CURE_DEF_DFPPartial_DFPFull_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_EOD_DLQ_CURE_DEF_DFPPartial_DFPFull_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:25_"+PayFrequency+"_"+CollateralType, "LOCI Cash _Draw _Stmnt _ EOD On Due Date _DLQ _ CURE _DEF _DFP Partial _ DFP Full");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Default_PartialPayment(SSN, FileName);
				this.Default_Payment(SSN, FileName);
				this.DefaultPaymentStatus1(SSN, FileName);
			}
		}			
	}*/

	//@Test (priority=17,groups = "revathi_TN_LOC")

	public void LOCICash_Draw_Stmnt_EOD_DLQ_CURE_DEF_PartialDFP_DFPFull_VoidDFP_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCICash_Draw_Stmnt_EOD_DLQ_CURE_DEF_PartialDFP_DFPFull_VoidDFP_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:26_"+PayFrequency+"_"+CollateralType, "LOCI Cash _Draw _Stmnt _ EOD On Due Date _DLQ _ CURE _DEF _DFP Partial _ DFP Full _Void DFP");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Default_PartialPayment(SSN, FileName);
				this.Default_Payment(SSN, FileName);
				this.DefaultPayment_Void(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName); 


			}
		}			
	}

	/*//----//@Test (priority=18,groups = "revathi_TN_LOC")

	public void LOCI_ACTM_Drawavailable_stmt() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_ACTM_Drawshouldnotavailable_Statement_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:60"+"_"+PayFrequency+"_"+CollateralType,"LOC Initiation - active Military - Draw should be available - Statement");
				appUrl = AppURL;
				
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.Check_Draw(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
			}
		}
	}
*/
	//@Test (priority=19,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTMSamedrawday_stmt() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTMSamedrawday_stmt_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:61"+"_"+PayFrequency+"_"+CollateralType,"LOC Initiation - Draw - active Military(same day) =>Statement");
				/*appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);*/
				
appUrl = AppURL;
				
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
			
				this.Agestore_Loandate(SSN, FileName, 3);
				this.DrawLoan(SSN, FileName,"350");	        
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);

			}
		}
	}

//	//@Test (priority=20,groups = "revathi_TN_LOC")

	public void LOCI_ACTM_Drawshouldnotbeavailable_stmt_DLQ_CURE_DFLT_Sc62() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_ACTM_Drawshouldnotbeavailable_stmt_DLQ_CURE_DFLT_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:62"+"_"+PayFrequency+"_"+CollateralType,"LOC Initiation - active Military - Draw - Statement - DLQ - CURE - Default");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);		       
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);		       
				this.Agestore_Loandate(SSN, FileName, 2);
				this.DrawLoan(SSN, FileName,"350");	 	
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawerDeassign(SSN, FileName); 
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN,FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);	
				this.AgeStore(SSN,FileName, 30);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);	  
				this.Default_WOProc(SSN, FileName);
				this.WOPaymentStatus(SSN, FileName);


			}
		}
	}

	//@Test (priority=21,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_ACTMEnd_Payoff_Clear() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Payoff_Clear_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:63"+"_"+PayFrequency+"_"+CollateralType,"LOC Initiation - Draw -> active Military - Statement - Terminate active Military - Payoff =>Clear");
				/*appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);*/
appUrl = AppURL;
				
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);		        
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN,FileName, -3);
				this.PayOffLoan(SSN, FileName);   

			}
		}
	}

/*
	//----//@Test (priority=22,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_Draw_ACTMEnd_PaymentwithCash_ACTM_ACTMEnd_Stmt_Sc64() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_Draw_ACTMEnd_PaymentwithCash_ACTM_ACTMEnd_Stmt_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:64"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation - Draw - Generate Statement - Active Military Start- Draw - Payment@store wd Cash - Draw - Active Military end - Payment - Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 	       	        
				this.Agestore_Loandate(SSN, FileName, 9);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);	
				this.AgeStore(SSN, FileName, -1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Active_Military_End(SSN, FileName);		        
				this.AgeStore(SSN, FileName, 1);
				this.Payments(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_End(SSN, FileName);		        
				this.StatementGeneration(SSN, FileName);			        
			}
		}
	}
*/


//@Test (priority=23,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_ACTM_PaymentwithCash_ACTMEnd_Stmt2_Sc64() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_ACTM_PaymentwithCash_ACTMEnd_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:65"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Statement -> Active Military end -> Deposit -> Active Military start -> Payment@ Store CASH -> Active Military end -> Statement Generation");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, 0);
				this.ACH_Deposit(SSN, FileName, 0);
				this.AgeStore(SSN, FileName, 2);
				this.ACHReturnPosting(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_Start(SSN, FileName);	
				this.AgeStore(SSN, FileName, 4);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 7);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);		        
			}
		}
	}



	/*//----//@Test (priority=24,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_ACTMEnd_stmt_ACTM_ACTMEnd_Stmt2_ACTM_ACTMEnd_Stmt3_Sc66() throws Exception {

		// Start test. Mention test script name
		//                AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_ACTM_PaymentwithCash_ACTMEnd_Stmt2_Txn_TestData
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_ACTM_ACTMEnd_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:66"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Active Military end -> Statement -> Active Military start -> Active Military end -> Statement -> Active Military start -> Active Military end -> Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	     
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName); 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName); 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName); 
				this.StatementGeneration(SSN, FileName);
			}
		}
	}
*/
	/*//------//@Test (priority=25,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_ACTMEnd_Draw_ACTM_WaiveFee_ACTMEnd_Stmt2_Sc67() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Draw_ACTM_WaiveFee_ACTMEnd_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:67"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Statement -> Active Military end -> Draw -> Active Military start -> Waive Fee -> Active Military end -> Statement Generation");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, 2);
				this.DrawLoan(SSN, FileName,"350");	 
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 6);
				this.WaiveFee(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);


			}
		}
	}
*/

	//@Test (priority=26,groups = "revathi_TN_LOC")

	public void LOCI_ACTM_ACTMEnd_Stmt_ACMT_Draw_ACTMEnd_stmt2_Sc69() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_ACTM_ACTMEnd_Stmt_ACMT_Draw_ACTMEnd_stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:69"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Active Military Start -> Active Military end -> Generate Statement ->Active Military Start -> Draw -> Active Military end-> Statement Generation ");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -7);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, -6);
				this.DrawLoan(SSN, FileName,"350");	  
				this.AgeStore(SSN, FileName, 0);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);



			}
		}
	}


	
	//@Test (priority=27,groups = "revathi_TN_LOC")

	public void LOCI_ACTM_Draw_stmt_ACTMEnd_Draw_ACTM_WaiveFee_Pymtwithcash_ACTMEnd_Stmt2_Sc70() throws Exception {

		// Start test. Mention test script name
		String FileName= "LOCI_ACTM_Draw_stmt_ACTMEnd_Draw_ACTM_WaiveFee_Pymtwithcash_ACTMEnd_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:70"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Active Military start -> Draw -> Statement -> Active Military end -> Draw -> Active Military start -> Waive Fee -> Payment @ Store Wd CASH -> Active Military end -> Statement Generation");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 2);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -2);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"50");	 
				this.AgeStore(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.WaiveFee(SSN, FileName);
				this.AgeStore(SSN, FileName, 4);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 6);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);

			}
		}
	}

	/*//---//@Test (priority=28,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_PayoffwithCash_ACTMEnd_stmt_Draw_ACTM_ACTMEnd_stmt2_ACTM_Pymt_ACTMEnd_stmt3_Sc71() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_PayoffwithCash_ACTMEnd_stmt_Draw_ACTM_ACTMEnd_stmt2_ACTM_Pymt_ACTMEnd_stmt3_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:71"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation - Draw - Active Military start - Payoff@ Store wd CASH - Active Military end - Statement - Draw - Active Military start - Active Military end - Statement - Active Military start - Payment @ Store wd CASH- Active Military end - Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	     
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 6);
				this.PayOffLoan(SSN, FileName); 
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"50");	 
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -3);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 2);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 4);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);

			}
		}
	}*/

	//@Test (priority=29,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_ACTMEnd_Payoff_ACMT_VoidPayoff_ACTMEnd_stmt2_Sc72() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Payoff_ACMT_VoidPayoff_ACTMEnd_stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:72"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Statement -> Active Military end -> Payoff ->Active Military start -> Payoff Void -> Active Military end -> Statement Generation");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	      
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 8);
				this.Active_Military_End(SSN, FileName); 
				this.AgeStore(SSN, FileName, 0);
				this.PayOffLoan(SSN, FileName);		       
				this.Active_Military_Start(SSN, FileName);
				this.Void_Payoff(SSN, FileName);
				this.AgeStore(SSN, FileName, 4);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);

			}
		}
	}

	
	//@Test (priority=30,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_Return_Payment_ACTM_PaymentVoid_ACTMEnd_Stmt_Sc73() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_ACTMEnd_Deposit_Return_Payment_ACTM_PaymentVoid_ACTMEnd_Stmt_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:73"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Statement -> Active Military end -> Deposit -> Return -> Payment -> Active Military start -> Payment Void -> Active Military end -> Statement Generation");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	      
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -3);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, -1);
				this.ACH_Deposit(SSN, FileName, 0);
				this.AgeStore(SSN, FileName, 3);
				this.ACHReturnPosting(SSN, FileName);
				this.AgeStore(SSN, FileName, 4);
				this.Payments(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.Void_PartialPayment(SSN, FileName);
				this.AgeStore(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName); 		        
				this.StatementGeneration(SSN, FileName);

			}
		}
	}	


	//@Test (priority=31,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_Payoffwithcash_STMT_Sc74() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_Payoffwithcash_STMT_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:74"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Active Military start -> Payoff @store wd CASH -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 6);
				this.PayOffLoan(SSN, FileName);
				this.StatementGeneration(SSN, FileName);       

			}
		}
	}

	

	//@Test (priority=32,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Stmt_ACTM_Payoff_STMT2_Sc75() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_Stmt_ACTM_Payoff_STMT2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:75"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Active Military -> Payoff -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);		        
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN,FileName, -3);
				this.PayOffLoan(SSN, FileName);
				this.StatementGeneration(SSN, FileName);       


			}
		}
	}
	
	
	
	/*//----//@Test (priority=33,groups = "revathi_TN_LOC")

	public void Loan_Draw_GenerateStatement_ACHDepositFlight_ActiveMilaitary_PaymentWDcash_ActiveMiltaryEnd_GenerateStatement() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_GenerateStatement_ACHDepositFlight_ActiveMilaitary_PaymentWDcash_ActiveMiltaryEnd_GenerateStatement_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:76"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Generate Statement_ACH Deposit in Flight_Active Military Start_Payment @ Store wd CASH_Active Military end_Generate Statement");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, 0);
				this.ACH_Deposit(SSN, FileName, 0);
				this.ACHReturnPosting(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_End(SSN, FileName); 
				this.StatementGeneration(SSN, FileName);
			}
		}
	}*/

	//@Test (priority=34,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Stmt_DLQ_CURE_Default_Writeoff_RCCSchedule_1stinstallmentPaid_ActiveMiltary_RccPlacementshouldStop() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_Stmt_DLQ_CURE_Default_Writeoff_RCCSchedule_1stinstallmentPaid_ActiveMiltary_RccPlacementshouldStop_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:77"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Generate Statement_DLQ_Cure_Default_Write off_RCC Enabled and Schedule generated_One instalment paid_Active Military_RCC Placements should stop");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 30);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Default_WOProc(SSN, FileName,60);
				this.WOPaymentStatus(SSN, FileName);
				this.EditBorrower(SSN, FileName,-10);
				this.Check_RCCSchd_WO(SSN, FileName, -3);
				this.WO_Recovery_pymt_BeforeDueDate_4thInst(SSN, FileName, 0, 2);
				this.Active_Military_Start(SSN, FileName);
				this.RCCStatus(SSN, FileName);



			}
		}


	}

	//@Test (priority=35,groups = "revathi_TN_LOC")


	public void Loanintialitation_Draw_Generatestatement_DLQ_CURE_Default_Activemiltary_PaymentPlan_writeoff
	() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loanintialitation_Draw_Generatestatement_DLQ_CURE_Default_Activemiltary_PaymentPlan_writeoff_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:78"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Generate Statement_DLQ _Cure_Default_Active Military_Payment Plan_Write off");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 30);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.PaymentPlan(SSN, FileName);
				this.CustomerDefault_WO(SSN, FileName, 35);
				this.Default_WOProc_60days(SSN, FileName);
				this.WOPaymentStatus(SSN, FileName);





			}
		}


	}

	/*//----@Test (priority=36,groups = "revathi_TN_LOC")

	public void LoanInition_Draw_Generatestatement_DLQ_Cure_ActiveMilitary_GenerateStatement() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LoanInition_Draw_Generatestatement_DLQ_Cure_ActiveMilitary_GenerateStatementTestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:79"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Generate Statement_DLQ_Cure_Active Military_Generate Statement");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);


			}
		}


	}
*/
	/*//----@Test (priority=37,groups = "revathi_TN_LOC")

	public void Loan_Draw_Stmt__DLQ_Cure_ActMlty_Stmt_DFLT_Writeoff_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_Stmt__DLQ_Cure_ActMlty_Stmt_DFLT_Writeoff_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);

				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:80_"+PayFrequency+"_"+CollateralType, "Loan Initiation _ Draw _ Generate Statement _ DLQ _ Cure _ Active Military _ Generate Statement _ Default _ Write off");
				Assert.assertTrue(true);
				appUrl = AppURL;

				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN,FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Default_WOProc(SSN, FileName);
				this.WOPaymentStatus(SSN, FileName);



			}
		}			
	}

*/
	
	/*//----@Test (priority=38,groups = "revathi_TN_LOC")

	public void Loan_Draw_Stmt_DLQ_Cure_Default_EnableRCC_ScdlGenerate_OneInstPay_ActMlty_RCCPlacementsStop_() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_Stmt_DLQ_Cure_Default_EnableRCC_ScdlGenerate_OneInstPay_ActMlty_RCCPlacementsStop_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:81_"+PayFrequency+"_"+CollateralType, "Loan Initiation _ Draw _ Generate Statement _ DLQ _ Cure _ Default _ RCC Enabled and Schedule generated _ One instalment paid _ Active Military _ RCC Placements should stop");
				Assert.assertTrue(true);
				appUrl = AppURL;


				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN,FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, -1);
				this.ACH_Deposit(SSN, FileName, 0);			
				this.ACHReturnPosting(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);		
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.EditBorrower(SSN, FileName);
				this.RCC_Schedule_1stInst_Agestore(SSN, FileName,-1,2);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.AfterDFLT_RCCOrigination(SSN, FileName, -1, 2);
				this.LOC_PreRCC_Deposit(SSN, FileName, 0, 2);
				this.RCC_Schedule_1stInst_Agestore(SSN, FileName,10,2);
				this.Admin_ACH_Clear(SSN, FileName, 10, 2);
				this.Active_Military_Start(SSN, FileName);
				this.RCCSchduleStatus_ActiveMilitary(SSN, FileName);

			}
		}			
	}

	*/
	
	//@Test (priority=39,groups = "revathi_TN_LOC")

	public void LoanInitiation_Draw_GenerateStatement_DLQ_CURE_Default_Writeoff_Activemilitary_PaymentPlan() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LoanInitiation_Draw_GenerateStatement_DLQ_CURE_Default_Writeoff_Activemilitary_PaymentPlan_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:82"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_ Generate Statement_DLQ_Cure_Default_Write off _Active Military_Payment Plan");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 30);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.Default_WOProc(SSN, FileName);
				this.WOPaymentStatus(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.PaymentPlan(SSN, FileName);



			}
		}


	}

  
	
	//@Test (priority=40,groups = "revathi_TN_LOC")

	public void Loanintillation_Draw_Generatestatement_Payoff_ActiveMilatary_payoffvoid_Activemilataryend_payment_GenerateStatement() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loanintillation_Draw_Generatestatement_Payoff_ActiveMilatary_payoffvoid_Activemilataryend_payment_GenerateStatement_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:83"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Generate Statement_Payoff_Active Military Start_Payoff Void_Active Military end_Payment_Generate Statement");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.PayOffLoan(SSN, FileName);
				this.Active_Military_Start(SSN, FileName);
				this.Void(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
			}
		}


	}

	/*//----@Test (priority=41,groups = "revathi_TN_LOC")

	public void Loaninitiation_Draw_Payment_Activemiltaray_Draw_Generatestatement_Waivefee_ActivemilataryEnd_Payment_GenerateStatement() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loaninitiation_Draw_Payment_Activemiltaray_Draw_Generatestatement_Waivefee_ActivemilataryEnd_Payment_GenerateStatement_TestData.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";   
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:85"+"_"+PayFrequency+"_"+CollateralType, "Loan Initiation_Draw_Payment_Active Military Start_Draw_Generate Statement_Waive Fee_Active Military end_Payment_Generate Statement");
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.Agestore_Loandate(SSN, FileName, 3);
				this.Payments(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 4);
				this.Active_Military_Start(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.WaiveFee(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, 4);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);




			}
		}


	}
*/
	/*//---@Test (priority=42,groups = "revathi_TN_LOC")

	public void LOCI_Draw_ACTM_stmt_Draw_ACTMEnd_PaymentwithCash_ACTM_ACTMEnd_Stmt2_Sc86() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_ACTM_stmt_Draw_ACTMEnd_PaymentwithCash_ACTM_ACTMEnd_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:86"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Active Military Start-> Draw -> Payment@store wd Cash -> Draw -> Active Military end -> Payment  -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);		        
				this.Agestore_Loandate(SSN, FileName, 9);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawLoan(SSN, FileName,"50");	 
				this.AgeStore(SSN, FileName, 1);
				this.Payments(SSN, FileName); 
				this.DrawLoan(SSN, FileName,"50");	 
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_End(SSN, FileName);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);			        
			}
		}
	}
*/
	/*//-----@Test (priority=43,groups = "revathi_TN_LOC")

	public void Loan_Draw_StGn_Draw_Deposit_Activemillatrystart_RTN_Activemillitryend_StGn() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_Loan_Draw_StGn_Draw_ACHDeposit_StartActiveMillatry_RTN_ActivemillartyEnd_StGn_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);  
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				//System.out.println(SSN);
				test = reports.startTest(Header+"_S.No:87"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Draw ->  Deposit -Active Military Start-> Return-> Active Military end -> Generate Statement");
				appUrl = AppURL;     
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.StatementGeneration(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");	 
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, -1);
				this.ACH_Deposit(SSN, FileName, 0);
				this.Active_Military_Start(SSN, FileName);
				this.ACHReturnPosting(SSN, FileName);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				

			}
		}


	}
*/
	//@Test (priority=44,groups = "revathi_TN_LOC")

	public void LOCI_ACTM_Draw_stmt_Pymtlessminpayamt_Draw_Pymt_VoidPymt_Draw_ACTMEnd_stmt2_Sc88() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_stmt_Pymtlessminpayamt_ACTM_Draw_DrawVoid_Draw_ACTMEnd_stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:88"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Active Military Start -> Draw -> Generate Statement -> Payment less than Min Payment Amount @ store -> Draw -> Payment@store -> Payment Void -> Draw -> Active Military end -> Draw -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 2);
				this.DrawLoan(SSN, FileName,"150");		        
				this.StatementGeneration(SSN, FileName); 		        
				this.Agestore_Loandate(SSN, FileName, 11);
				this.Payments_Lessthan_Min_Payment_Amount(SSN, FileName);	
				this.Agestore_Loandate(SSN, FileName, 12); 
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN,FileName, -4);
				this.Payments1(SSN, FileName);
				this.Void_PartialPayment(SSN, FileName);
				this.AgeStore(SSN,FileName, -3);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN,FileName, -2);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN,FileName, -1);
				this.DrawLoan(SSN, FileName,"50");;
				this.StatementGeneration(SSN, FileName);

			}
		}
	}

	
	



	/*//-----@Test (priority=45,groups = "revathi_TN_LOC")

	public void LOCI_Draw_stmt_Pymtlessminpayamt_ACTM_Draw_DrawVoid_Draw_ACTMEnd_stmt2_Sc90() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_stmt_Pymtlessminpayamt_ACTM_Draw_DrawVoid_Draw_ACTMEnd_stmt2__Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:90"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Payment less than Min Payment Amount -> Active Military Start-> Draw -> Draw Void -> Draw -> Active Military end -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");		        
				this.StatementGeneration(SSN, FileName);  
				this.Agestore_Loandate(SSN, FileName, 7);
				this.Payments_Lessthan_Min_Payment_Amount(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 8); 
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 9);
				this.DrawLoan(SSN, FileName,"50");
				this.VoidDrawLoan(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN,FileName, 2);
				this.Active_Military_End(SSN, FileName);
				this.StatementGeneration(SSN, FileName);		        
			}
		}
	}
	*/
	
	
	
	/*//-----@Test (priority=46,groups = "revathi_TN_LOC")

	public void LOCI_Draw_stmt_ACTM_DLQ_Payment_Draw_ACTMEnd_Draw_stmt2_Sc91() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_stmt_ACTM_DLQ_Payment_Draw_ACTMEnd_Draw_stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:91"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Active Military Start -> Delinquent -> Payment -> Draw -> Active Military end -> Draw -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);  
				this.AgeStore(SSN, FileName, -5);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawerDeassign(SSN, FileName); 
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);		        
				this.AgeStore(SSN, FileName, 2);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.DrawLoan(SSN, FileName,"50"); 
				this.AgeStore(SSN, FileName, 5);
				this.Active_Military_End(SSN, FileName); 
				this.AgeStore(SSN, FileName, 7);
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);		        

			}
		}
	}

*/
	//@Test (priority=47,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Stmt_ACTM_DLQ_CURE_Payment_VoidPymt_Pymt_Draw_ACTMEnd_Draw_Payment_stmt2_Sc92() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_Stmt_ACTM_DLQ_CURE_Payment_VoidPymt_Pymt_Draw_ACTMEnd_Draw_Payment_stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:92"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Active Military Start -> Delinquent -> Cure -> Payment -> Payment Void -> Payment -> Draw -> Active Military end -> Draw -> Payment -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);		        
				this.Agestore_Loandate(SSN, FileName, 1);  
				this.DrawLoan(SSN, FileName,"350");	
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN,FileName, -2);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawerDeassign(SSN, FileName); 
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN,FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);		        
				this.AgeStore(SSN,FileName, -4); 
				this.Payments(SSN, FileName);
				this.Void_PartialPayment(SSN, FileName);
				this.AgeStore(SSN,FileName, -3); 
				this.Payments(SSN, FileName);
				this.AgeStore(SSN,FileName, -2);
				this.DrawLoan(SSN, FileName,"50");
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN,FileName, 2);
				this.Payments_Partial(SSN, FileName);
				this.StatementGeneration(SSN, FileName);

			}
		}
	}

	/*//----@Test (priority=48,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Stmt_DLQ_CURE_ACTM_Payment_Stmt2_Draw_Payment_stmt3_ACTMEnd_Sc93() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_Stmt_DLQ_CURE_ACTM_Payment_Stmt2_Draw_Payment_stmt3_ACTMEnd_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:93"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Delinquent -> Cure -> Active Military Start -> Payment -> Generate Statement -> Draw -> Payment -> Generate Statement -> Active Military end");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);		       
				this.Agestore_Loandate(SSN, FileName, 1);  
				this.DrawLoan(SSN, FileName,"350");	
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.DrawerDeassign(SSN, FileName); 
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN,FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);	
				this.AgeStore(SSN,FileName, 1);		        
				this.Active_Military_Start(SSN, FileName);	
				this.AgeStore(SSN,FileName, 2);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN,FileName, -3);
				this.DrawLoan(SSN, FileName,"50");
				this.AgeStore(SSN,FileName, -1);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN,FileName, 0);
				this.Active_Military_End(SSN, FileName);



			}
		}
	}

*/
	
	/*//----@Test (priority=49,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Stmt_ACTM_Payment_Payoff_Payoffvoid_ACTMEnd_Payment_Stmt2_Sc94() throws Exception {

		// Start test. Mention test script name
		String FileName= "LOCI_Draw_Stmt_ACTM_Payment_Payoff_Payoffvoid_ACTMEnd_Payment_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:94"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Generate Statement -> Active Military Start-> Payment -> Payoff -> Payoff Void -> Active Military end -> Payment  -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350"); 
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -4);
				this.Active_Military_Start(SSN, FileName);
				this.AgeStore(SSN, FileName, -2);
				this.Payments(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.PayOffLoan(SSN, FileName);
				this.PayOff_Void(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.Active_Military_End(SSN, FileName);		        
				this.AgeStore(SSN, FileName, 5);
				this.Payments(SSN, FileName);	       
				this.StatementGeneration(SSN, FileName);





			}
		}
	}
*/
	/*//-----@Test (priority=50,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Payment_ACTM_Draw_Stmt_ACTMEnd_Payment_Stmt2_Sc95() throws Exception {

		// Start test. Mention test script name
		String FileName= "LOCI_Draw_Payment_ACTM_Draw_Stmt_ACTMEnd_Payment_Stmt2_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:95"+"_"+PayFrequency+"_"+CollateralType,"Loan Initiation -> Draw -> Payment -> Active Military Start -> Draw -> Generate Statement -> Active Military end -> Payment -> Generate Statement");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350"); 
				this.Agestore_Loandate(SSN, FileName, 2);
				this.Payments(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 3);
				this.Active_Military_Start(SSN, FileName);
				this.Agestore_Loandate(SSN, FileName, 4);
				this.DrawLoan(SSN, FileName,"50");
				this.StatementGeneration(SSN, FileName);
				this.AgeStore(SSN, FileName, -2);
				this.Active_Military_End(SSN, FileName);
				this.AgeStore(SSN, FileName, 0);
				this.Payments(SSN, FileName);
				this.StatementGeneration(SSN, FileName);
			}
		}
	}
*/
	/*//----@Test (priority=51,groups = "revathi_TN_LOC")

	public void LOCI_Draw_PNBK_Drawnotavailble() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOC_Draw_PBNK_Drawnot_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"_S.No:96"+"_"+PayFrequency+"_"+CollateralType,"LOCI =>Draw =>Pending Bankruptcy =>Draw not availble");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.PendingBNK(SSN, FileName);
				this.DrawStatust(SSN, FileName);

			}
		}


	}*/


	//@Test (priority=52,groups = "revathi_TN_LOC")

	public void LOCI_Draw_PNBK_VoidPNBK_Drawavailable() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOC_Draw_PBNK_VoidPBNK_DrawAvailable_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"_S.No:97"+"_"+PayFrequency+"_"+CollateralType," LOCI =>Draw =>Pending Bankruptcy =>Draw not availble =.> Void PBNK =>Draw Available");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
                this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.PendingBNK(SSN, FileName);
				this.PendingBNK_Void(SSN, FileName);
				this.DrawStatus_PNBK(SSN, FileName);

			}
		}

	}

	//@Test (priority=53,groups = "revathi_TN_LOC")

	public void LOCI_Draw_PNBK_Drawnotavailble_VoidDraw() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOC_Draw_PBNK_Drawnot__Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"_S.No:98"+"_"+PayFrequency+"_"+CollateralType,"LOCI =>Draw =>Pending Bankruptcy =>Draw not availble=>Void of Past Draw");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.PendingBNK(SSN, FileName);
				this.DrawStatust(SSN, FileName);
				this.VoidDrawLoan(SSN,FileName);

			}
		}
		//this.Login("CSR353","1234","353");

	}

	//@Test (priority=54,groups = "revathi_TN_LOC")
	public void LOCI_Draw_Statement_Draw_PBNK_Drawnotavailable() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOC_Draw_Statment_Draw_PBNK_DrawnotAvailable_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		//int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				//driver.get(appUrl);
				//test.log(LogStatus.INFO, "Application is launched");
				//driver.manage().window().maximize();
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"_S.No:99"+"_"+PayFrequency+"_"+CollateralType,"LOCI =>Draw =>Statement =>Draw => PBNK=> Draw not available");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.DrawLoan(SSN, FileName,"50");		        
				this.PendingBNK(SSN, FileName);
				this.DrawStatust(SSN, FileName);
			}
		}
		//this.Login("CSR353","1234","353");

	}

	//@Test (priority=55,groups = "revathi_TN_LOC")


	public void LOCI_Draw_Statement_Draw_PBNKbeforeduedate_NoDeposit() throws Exception {

		String FileName= "AA_LOC_Draw_Statement_Draw_PBNKbeforeDD_NoDeposit_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";

		System.out.println(lastrow);

		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);

			if(RunFlag.equals("Y"))
			{	

				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"Regression_Scenario.No_100"+"_"+PayFrequency+"_"+CollateralType,"LOCI=> Draw =>Statement =>PBNK before due date => No Deposit presentment");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
			    this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.PendingBNK(SSN, FileName);			    
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing_NODep(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);



			}


		}


	}

	//@Test (priority=56,groups = "revathi_TN_LOC")

	public void LOCI_Draw_Statement_Draw_PBNKbeforeduedate_VoidPBNK_Deposit() throws Exception {

		String FileName= "AA_LOC_Draw_Statement_Draw_PBNKbeforeDD_VoidPBNK_YesDeposit_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";

		System.out.println(lastrow);

		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);

			if(RunFlag.equals("Y"))
			{	

				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"Regression_Scenario.No_101"+"_"+PayFrequency+"_"+CollateralType,"LOCI=> Draw =>Statement =>PBNK before due date=>Void PBNK on due date => Deposit presentment");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.PendingBNK(SSN, FileName);
				this.PendingBNK_Void(SSN, FileName);
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);

			}


		}


		//this.Login("CSR353","1234","353");


	}


	//@Test (priority=57,groups = "revathi_TN_LOC")
	public void LOCI_Draw_Statement_Draw_PBNKbeforeduedate_VoidPBNKAfterduedate_Deposit() throws Exception {

		String FileName= "AA_LOC_Draw_Statement_Draw_PBNKbeforeDD_VoidPBNKAfterDue_YesDeposit_Txn_Testdata.xls";
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName); 
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";

		System.out.println(lastrow);

		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);

			if(RunFlag.equals("Y"))
			{	

				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);	
				String Header = StateID+ "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);		 

				test = reports.startTest(Header+"Regression_Scenario.No_102"+"_"+PayFrequency+"_"+CollateralType,"LOCI=> Draw =>Statement =>PBNK before due date=>Void PBNK after due date => Deposit presentment");

				Assert.assertTrue(true);
				appUrl = AppURL;
				CSRLoginpage login = new CSRLoginpage();
				login.Login(UserName, Password, StoreId, driver, AppURL, test);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test,AppURL, SSN,FileName);
				this.NewLoan(SSN, FileName);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName);
				this.PendingBNK(SSN, FileName);			        
				this.AgeStore(SSN, FileName, 4);
				this.PendingBNK_Void(SSN, FileName);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);

			}


		}


	}

	/*//----@Test (priority=58,groups = "revathi_TN_LOC")

	public void LOCI_Draw_stmt_Deposit_Return_DLQ_Cure_DFLT_PBNK_StopRPP_Sc103() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_stmt_Deposit_Return_DLQ_Cure_DFLT_PBNK_StopRPP_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:103"+"_"+PayFrequency+"_"+CollateralType,"LOCI=>Draw=>Statement =>Depsoit=>Rtn=>DLQ=>CURE=>DFLT=> PBNK=> Stop RPP");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, -1);
				this.ACH_Deposit(SSN, FileName, 0);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.ACHReturnPosting(SSN, FileName);
				this.AgeStore(SSN,FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.AgeStore(SSN,FileName, 30);		       
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName); 
				this.PendingBNK(SSN, FileName);
				this.Check_RPP(SSN, FileName);


			}
		}
	}
*/
	
	/*//----@Test (priority=59,groups = "revathi_TN_LOC")

	public void LOCI_Draw_stmt_Deposit_Return_DLQ_Cure_DFLT_PBNK_StopRCC_Sc104() throws Exception {

		// Start test. Mention test script name
		String FileName= "AA_LOCI_Draw_stmt_Deposit_Return_DLQ_Cure_DFLT_PBNK_StopRCC_Txn_TestData.xls";		 
		TestData = new Excel(System.getProperty("user.dir") + prop.getProperty("AA_Store_Test_data_TN_LOC_path_revathi") + FileName);
		int lastrow=TestData.getLastRow("NewLoan");
		String sheetName="NewLoan";
		System.out.println(lastrow);
		for(int row=2;row<=lastrow;row++)
		{
			String RunFlag = TestData.getCellData(sheetName,"Run",row);
			//System.out.println(RunFlag);
			if(RunFlag.equals("Y"))
			{	
				AppURL = prop.getProperty("AppURL_TN_LOC_revathi");
				UserName = prop.getProperty("UserName_TN_LOC_revathi");
				Password = prop.getProperty("Password_TN_LOC_revathi");
				// System.out.println(Password);
				StoreId = prop.getProperty("StoreID_TN_LOC_revathi");
				String ProductID = TestData.getCellData(sheetName,"ProductID",row);
				String StateID = TestData.getCellData(sheetName,"StateID",row);
				String SSN = TestData.getCellData(sheetName,"SSN",row);
				String PayFrequency = TestData.getCellData(sheetName,"Income_PayFrequency",row);
				String CollateralType = TestData.getCellData(sheetName,"ESign_CollateralType",row);
				String Header = StateID+ "_" + ProductID;      		        
				test = reports.startTest(Header+"_S.No:104"+"_"+PayFrequency+"_"+CollateralType,"LOCI=>Draw=>Statement =>Depsoit=>Rtn=>DLQ=>CURE=>DFLT=> PBNK=> Stop RCC");
				appUrl = AppURL;

				this.Login(UserName,Password,StoreId);			        
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_LOC(driver, test, AppURL, SSN, FileName);
				this.NewLoan(SSN,FileName);	
				this.Agestore_Loandate(SSN, FileName, 1);
				this.DrawLoan(SSN, FileName,"350");
				this.StatementGeneration(SSN, FileName); 
				this.AgeStore(SSN, FileName, -1);
				this.DrawerDeassign(SSN, FileName);
				//this.EODProcessing(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.NACHA(SSN, FileName, -1);
				this.ACH_Deposit(SSN, FileName, 0);
				this.DeliquentPaymentStatus(SSN, FileName);
				this.AgeStore(SSN, FileName, 3);
				this.ACHReturnPosting(SSN, FileName); 
				this.AgeStore(SSN,FileName, 10);
				this.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.CurePaymentStatus(SSN, FileName);
				this.AgeStore(SSN,FileName, 30);		       
				this.CustomerDefault(SSN, FileName);
				this.DefaultPaymentStatus(SSN, FileName);
				this.PendingBNK(SSN, FileName);
				this.RCCStatus(SSN, FileName);


			}
		}
	}*/
			}
