package pack;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeClass;
import org.testng.Assert;
import org.testng.AssertJUnit;
import org.testng.ITestResult;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;

import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;

import org.openqa.selenium.support.ui.Select;

import org.openqa.selenium.support.ui.WebDriverWait;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import pack.*;

/*import Test.CO_ILP.Need;
import Test.CO_ILP.scenario;*/
import pack.Excel;
import bsh.This;
//import scala.collection.Iterator;
//import scala.collection.Set;

//import Pages.HomePage;
//import Pages.LoginPage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.FileWriter;

import java.io.IOException;
import java.io.FileReader;

public class AA_FL_ILP {

	public static String AdminURL;
	public static String AppURL;
	public static Properties prop;
	String timestamp = new SimpleDateFormat("MM.dd.yyyy.HH.mm.ss").format(new Date());
	public WebDriverWait wait;
	static WebDriver driver;
	static String appUrl;

	static ExtentReports reports;
	public static String UserName;
	public static String Password;
	public static String StoreId;
	public static ExtentTest test;
	public static Excel TestData;

	// @Test (priority=59) //Leela - Completed

	public void Loan_DFLT_WO_WORecPartPmtWithAllTenderTypes_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Loan_DFLT_WO_WORecPartPmtWithAllTenderTypes_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:62" + "_" + PayFrequency + "_" + CollateralType,
						"Laon_default_write off_writeoff recovery(partial amount)(with all possible tender types)");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);

				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");

				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);

				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);

				// this.History(SSN, FileName);
				this.EPP_AfterDFLT_WO_EOD_BatchProcess_DueDate(SSN, FileName, 60, 2);
				// this.EOD_BatchProcess_WO(SSN, FileName, 60);
				// this.History(SSN, FileName);

				this.Writoff_RecoveryPartPmt_ILP(SSN, FileName);

				// this.History(SSN, FileName);

			}
		}

	}

	// @Test (priority=60) //Leela - Completed

	public void Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:63" + "_" + PayFrequency + "_" + CollateralType,
						"Laon_default_write off_writeoff recovery(full amount)_Loan_DFLT_WO_WORecFull_VoidWithAllTenderTypes_Void(with all possible tender types)");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();

				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);

				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");

				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);

				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);

				// this.History(SSN, FileName);
				this.EPP_AfterDFLT_WO_EOD_BatchProcess_DueDate(SSN, FileName, 60, 2);

				// this.History(SSN, FileName);
				this.Writoff_RecoveryFull_ILP(SSN, FileName);

				this.Void_WO(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.History(SSN, FileName);

			}
		}

	}

	// @Test (priority=61)

	public void Loan_DFLT_WO_WORecPartPmt_VoidNextDay() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Loan_DFLT_WO_WORecPartPmt_VoidNextDay_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:64" + "_" + PayFrequency + "_" + CollateralType,
						"Laon_default_write off_writeoff recovery(partial amount)_void on next day(with all possible tender types)");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);

				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");

				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);

				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);

				// this.History(SSN, FileName);
				this.EPP_AfterDFLT_WO_EOD_BatchProcess_DueDate(SSN, FileName, 60, 2);
				// this.History(SSN, FileName);

				this.Writoff_RecoveryPartPmt_ILP(SSN, FileName);
				this.AgeStore_AfterWO(SSN, FileName, 61);
				this.Loan_Balance_Status(SSN, FileName);
				// this.History(SSN, FileName);

				this.EncryptionKey_Void_WORec(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=62) //Leela

	public void DFLTLoan_EPPConvert_PpayAllInst_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_DFLTLoan_EPPConvert_PpayAllInst_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:65" + "_" + PayFrequency + "_" + CollateralType,
						"Pick anILP Loan which is default status _ Convert to EPP _ PPAY all installments accordingly before due date");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP
				this.EPP_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 5);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 6);
				this.RPP_Payment_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

			}
		}

	}

	@Test(priority = 84) // 63//Issue05-17-2019

	public void DFLTLoan_EPPConvert_DepositAll_ClearAll_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_DFLTLoan_EPPConvert_DepositAll_ClearAll_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:66" + "_" + PayFrequency + "_" + CollateralType,
						"Pick an ILP Loan which is default status _ Convert to EPP _ Deposit all installments on due date accordingly and clear them");
				appUrl = AppURL;
				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");

				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 2);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 2);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 2);
				// this.Check_TransactionRecords(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 3);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 3);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 3);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 3);
				// this.Check_TransactionRecords(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 4);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 4);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 4);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 4);
				// this.Check_TransactionRecords(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
			}
		}

	}

	// @Test (priority=64) //Leela - Last

	public void DFLTLoan_EPPConvert_PpayAllInst_VoidLastInst_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_DFLTLoan_EPPConvert_PpayAllInst_VoidLastInst_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:67" + "_" + PayFrequency + "_" + CollateralType,
						"Pick an ILP Loan which is default status_ Convert to EPP _ PPAY all installments accordingly before due date _void last installment payment");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
				this.RPP_Payment_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				this.RPP_Payment_Void(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

			}
		}
	}

	// Scenarios 68 to 75 were blocked

	// @Test (priority=67)//Issue05-17-2019

	public void Pick_ILP_WriteOff_ConvertEpp_DepositAllinstOnduedate_Clear() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Pick_ILP_WriteOff_ConvertEpp_DepositAllinstOnduedate_Clear_Testdata.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";

		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();

				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:80" + "_" + PayFrequency + "_" + CollateralType,
						"Pick anILP Loan which is writeoff status_Convert to EPP_PPAY all installments accordingly before due datePick an ILP Loan which is writeoff status_Convert to EPP_Deposit all installments on due date accordingly and clear them");
				appUrl = AppURL;
				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);
				this.EOD_BatchProcess_DueDate_DFLT(SSN, FileName, 60, 2);
				// this.History(SSN, FileName);

				this.Loan_Balance_Status(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 2);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 2);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 2);
				this.Check_TransactionRecords(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 3);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 3);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 3);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 3);
				this.Check_TransactionRecords(SSN, FileName);

				this.AgeStore_RPP_ILP(SSN, FileName, -1, 4);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile_PPN(SSN, FileName, -1, 4);
				this.ACH_Deposit_RPP_ILP(SSN, FileName, 0, 4);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 8, 4);
				this.Check_TransactionRecords(SSN, FileName);

				this.Loan_Balance_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=68)

	public void Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate_Void() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Pick_ILP_WriteoffLoan_ConvertEPP_PPayAllInstallementBeforeDueDate_Void_Testdata.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";

		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();

				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:81" + "_" + PayFrequency + "_" + CollateralType,
						"Pick anILP Loan which is writeoff status_Convert to EPP_PPAY all installments accordingly before due date");
				appUrl = AppURL;
				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 2);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 3);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 4);
				this.RPP_Payment_ILP(SSN, FileName);
				this.AgeStore_RPP_ILP(SSN, FileName, -4, 5);
				this.RPP_Payment_ILP(SSN, FileName);
				this.Void_Afterallinstallment(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);

			}
		}

	}

	// Scenarios Blocked from 82 to 89

	// @Test (priority=69) //Leela - Completed

	public void LonI_WO_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_WO_PPN_1stInstpymt_VoidPymt_RunEODbatch35daysfromduedate_Testdata.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:90" + "_" + PayFrequency + "_" + CollateralType,
						"Pick an LOC Loan which is writeoff status_PPN=>1# paymnet _void _Run EOD batch process on 35 days from the due dateNOTE:In between 1#  due date to 35  days if 2# is there then that  amount should be missed payment))");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 151, 2);
				// this.History(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.AgeStore_EPP(SSN, FileName, 0, 2);
				this.RPP_Payment_ILP(SSN, FileName);
				this.Void_PaymentPlanPayment(SSN, FileName);
				this.AgeStore_EPP(SSN, FileName, 35, 2);
				this.EOD_BatchProcess_EPPDueDate(SSN, FileName, 0, 2);
				this.Loan_Balance_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=70)

	public void Loan_Bankrupt_Void_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Loan_Bankrupt_Void_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:91" + "_" + PayFrequency + "_" + CollateralType,
						"Loan_Select Void Status from Status dropdown in Bankruptcy Deceased Suite pageEnter all mandatory fields and click on Save");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.Bankrupt(SSN, FileName);
				this.Bankrupt_Void(SSN, FileName);
				// this.BankruptStatus(SSN, FileName);

				// this.History(SSN, FileName);

			}
		}

	}

	// @Test (priority=73)//leela -Pending

	public void CO_ILP_Loan_first_payment_BNK_Second_deposit() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_CO_ILP_Loan_first_payment_BNK_Second_deposit_Testdata.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";

		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);

			if (RunFlag.equals("Y")) {

				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String Header = StateID + "_" + ProductID;
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);

				test = reports.startTest(Header + "_S.No:95" + "_" + PayFrequency + "_" + CollateralType,
						"Loan>1 payment > mark customer to BNK>2 deposit");

				Assert.assertTrue(true);
				appUrl = AppURL;
				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.AgeStore(SSN, FileName, -4);
				this.installmentPayment(SSN, FileName);
				this.Bankrupt(SSN, FileName);
				this.AgeStore_2ndInstallment(SSN, FileName, 0);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);

			}

		}
	}

	// @Test (priority=74) //Leela - Completed

	public void LonI_Bnkrupt_Dismissed() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_Bnkrupt_Dismissed_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:96" + "_" + PayFrequency + "_" + CollateralType,
						"Loan>Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save. 2) Go to Edit bankrupt information >> Click on Go Button and select dismissed from drop down >> enter manditory fields and Clickon save.");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.Bankrupt(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);
				this.Dismissed_AfterBANKRUPT(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=75) //Leela - Completed

	public void LonI_Bnkrupt_Deceased() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_Bnkrupt_Deceased_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:97" + "_" + PayFrequency + "_" + CollateralType,
						"1)Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite pageEnter all manatory fields and click on Save.2) Go to Edit bankrupt information >> Click on Go Button and select deaceased from drop down >> enter manditory fields andClick on save.");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.Bankrupt(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);
				this.Deceased_AfterBANKRUPT(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=76)

	public void LonI_Bnkrupt_Discharge() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_Bnkrupt_Discharge_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:98" + "_" + PayFrequency + "_" + CollateralType,
						"1)Select 'Bankruptcy' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save.2) Go to Edit bankrupt information >> Click on Go Button and select Discharge from drop down >> enter manditory fields and Clickon save.");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.Bankrupt(SSN, FileName);
				this.Discharge_AfterBANKRUPT(SSN, FileName, 3);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);

			}
		}

	}

	// @Test (priority=77)

	public void LonI_Deceased() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_Deceased_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:99" + "_" + PayFrequency + "_" + CollateralType,
						"Select 'deceased' Status from Status dropdown in Bankruptcy/Deceased Suite page Enter all mandatory fields and click on Save");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.Deceased(SSN, FileName);
				this.Loan_Balance_Status(SSN, FileName);
				// this.Customer_Status(SSN, FileName);
			}
		}

	}

	// @Test (priority=78) //Leela - Completed

	public void LonI_DFLT_PPN_BNK_1InstDeposit() throws Exception {

		// Start test. Mention test script name
		String FileName = "LonI_DFLT_PPN_BNK_1InstDeposit.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:100" + "_" + PayFrequency + "_" + CollateralType,
						"Loan>default>payment(15% of default payment)Run EOD batch process(default date+120 days)");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				this.EOD_BatchProcess_DueDate(SSN, FileName, 0, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 10, 2);
				this.EOD_BatchProcess_DueDate(SSN, FileName, 31, 2);
				// this.History(SSN, FileName);
				// this.RCC_Revoke(SSN, FileName);//for FL_ILP

				this.EPP_ILP(SSN, FileName);
				this.Bankrupt(SSN, FileName);
				this.AgeStore_EPP(SSN, FileName, -1, 2);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				EODProcessing_with_recordsChecking.EODProcessing_with_recordsChecking(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);

			}
		}

	}

	// @Test (priority=79) //Leela - Completed

	public void Loan_1stpayment_activemilitary_2ndpayment_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_Loan_1stpayment_activemilitary_2ndpayment_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:101" + "_" + PayFrequency + "_" + CollateralType,
						"Loan_1st Inst payment_active military_2nd Inst payment");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				AgeStore_ILP.AgeStore_ILP(SSN, FileName, -3, 2);
				this.Payment_ILP(SSN, FileName);
				Active_Military_Start.Active_Military_Start(SSN, FileName);

				AgeStore_ILP.AgeStore_ILP(SSN, FileName, -3, 3);
				this.Payment_ILP(SSN, FileName);

				// this.History(SSN, FileName, 0);
			}
		}

	}

	// @Test (priority=0) //Leela - Completed(priority=80)

	public void BorrowerRegistration_ActiveMilitary_NewLoanNotProcessed_() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_BorrowerRegistration_ActiveMilitary_NewLoanNotProcessed_TestData.xls";
		Excel TestData = new Excel("E:/QC_Workspace/AA_Automation/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		// int lastrow=TestData.getLastRow("Borrower");
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				// System.out.println(SSN);
				test = reports.startTest(Header + "_S.No:102" + "_" + PayFrequency + "_" + CollateralType,
						"Loan_1st Inst payment_active military_2nd Inst payment");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				Active_Military_Start.Active_Military_Start(SSN, FileName);
				this.Check_NewLoan_ILP(SSN, FileName);
			}
		}

	}

	// @Test (priority=82) //Leela - Completed (priority=82) Issue05-17-2019

	public void LonI_IstInstPayment_ACTM_2ndInstDeposit_Verify_Record() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_IstInstPayment_ACTM_2ndInstDeposit_Verify_Record_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:104" + "_" + PayFrequency + "_" + CollateralType,
						"Loan_age the store date to after rescind period_select payment option from CSR dropdown_Payment screen should show the follwing options  1.Pay Off the balance 2.Pay Installment Am t 3.Pay any other Amt>select pay any other amt_enter Payment amount less than 1# amount");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);
				Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 2);
				// this.Apportions_List(SSN, FileName, 2);
				Active_Military_Start.Active_Military_Start(SSN, FileName);
				AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				this.StatementGeneration_EODProcessing(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);
				this.Payliance_OriginationFile(SSN, FileName, -1, 3);
				this.ACH_Deposit_ILP(SSN, FileName, 0);

				// this.Deposit_Record_Verification(SSN, FileName);

			}
		}

	}

	// @Test (priority=83) // last

	public void LonI_IstInstPayment_ACTM_ACHRevoke_2ndInstDeposit_Verify_Record() throws Exception {

		// Start test. Mention test script name
		String FileName = "AA_LonI_IstInstPayment_ACTM_ACHRevoke_2ndInstDeposit_Verify_Record_Txn_TestData.xls";
		Excel TestData = new Excel(System.getProperty("user.dir") + "/TestData/FL_ILP/" + FileName);
		int lastrow = TestData.getLastRow("NewLoan");
		String sheetName = "NewLoan";
		System.out.println(lastrow);
		for (int row = 2; row <= lastrow; row++) {
			String RunFlag = TestData.getCellData(sheetName, "Run", row);
			// System.out.println(RunFlag);
			if (RunFlag.equals("Y")) {
				// driver.get(appUrl);
				// test.log(LogStatus.INFO, "Application is launched");
				// driver.manage().window().maximize();
				String AppURL = TestData.getCellData(sheetName, "AppURL", row);
				String UserName = TestData.getCellData(sheetName, "UserName", row);
				String Password = TestData.getCellData(sheetName, "Password", row);
				// System.out.println(Password);
				String StoreId = TestData.getCellData(sheetName, "StoreID", row);
				String ProductID = TestData.getCellData(sheetName, "ProductID", row);
				String StateID = TestData.getCellData(sheetName, "StateID", row);
				String SSN = TestData.getCellData(sheetName, "SSN", row);
				String PayFrequency = TestData.getCellData(sheetName, "Income_PayFrequency", row);
				String CollateralType = TestData.getCellData(sheetName, "ESign_CollateralType", row);
				String Header = StateID + "_" + ProductID;
				test = reports.startTest(Header + "_S.No:105" + "_" + PayFrequency + "_" + CollateralType,
						"Loan_age the store date to after rescind period_select payment option from CSR dropdown_Payment screen should show the follwing options  1.Pay Off the balance 2.Pay Installment Am t 3.Pay any other Amt>select pay any other amt_enter Payment amount less than 1# amount");
				appUrl = AppURL;

				Login.Login(UserName, Password, StoreId);
				BorrowerRegistrationpage Reg = new BorrowerRegistrationpage();
				Reg.RegistrationPage_NewLoan_FL_ILP(driver, test, AppURL, SSN, FileName);
				NewLoan_ILP.NewLoan_ILP(SSN, FileName, "100");
				AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 2);
				Payment_Inst_Amount.Payment_Inst_Amount(SSN, FileName, 2);
				// this.Apportions_List(SSN, FileName, 2);
				Active_Military_Start.Active_Military_Start(SSN, FileName);
				ACHRevoke.ACHRevoke(SSN, FileName);
				AgeStore_ILP.AgeStore_ILP(SSN, FileName, 0, 3);
				DrawerDeassign.DrawerDeassign(SSN, FileName);
				EODProcessing_with_recordsChecking.EODProcessing_with_recordsChecking(SSN, FileName);
				this.StoreInfo(SSN, FileName);
				this.Safeassign(SSN, FileName);
				this.Drawerassign(SSN, FileName);

			}
		}

	}

	@AfterMethod(alwaysRun = true)

	public void getResult(ITestResult result) throws Exception {
		if (result.getStatus() == ITestResult.FAILURE) {
			test.log(LogStatus.FAIL, "Test Case Failed is " + result.getName());
			// test.log(LogStatus.FAIL, "Test Case Failed is
			// "+result.getThrowable());

			String screenshotPath = getScreenhot(driver, result.getName());
			// To add it in the extent report
			test.log(LogStatus.FAIL, test.addScreenCapture(screenshotPath));
		} else if (result.getStatus() == ITestResult.SKIP) {
			test.log(LogStatus.SKIP, "Test Case Skipped is " + result.getName());
		} else if (result.getStatus() == ITestResult.SUCCESS) {

			test.log(LogStatus.PASS, result.getName() + " Test Case is Passed");
		}
		reports.flush();
		// driver.quit();

	}

	public static String getScreenhot(WebDriver driver, String screenshotName) throws Exception {
		String dateName = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		// TakesScreenshot ts = (TakesScreenshot) driver;
		// File source = ts.getScreenshotAs(OutputType.FILE);

		File source = ((TakesScreenshot) (driver)).getScreenshotAs(OutputType.FILE);
		// after execution, you could see a folder "FailedTestsScreenshots"
		// under src folder
		String destination = System.getProperty("user.dir") + "/ExecutionReports/LOC/FailedTestsScreenshots/"
				+ screenshotName + dateName + ".png";
		File finalDestination = new File(destination);
		FileUtils.copyFile(source, finalDestination);
		return destination;
	}

	@AfterMethod
	@AfterTest(alwaysRun = true)
	public void tearDown() {
		// Ending Test
		reports.endTest(test);

		// writing everything into HTML report
		reports.flush();
	}

	@AfterClass(alwaysRun = true)
	public void quit() {
		// Closing browser
		driver.quit();

	}

	public void takeScreenShot(WebDriver driver, String filePath) {
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(scrFile, new File(filePath));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@BeforeClass(alwaysRun = true)
	public synchronized void initialize() {
		// Create an instance of ExtentsReports class and pass report storage
		// path as a parameter
		// Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		String timestamp = new SimpleDateFormat("MM.dd.yyyy.HH.mm.ss").format(new Date());
		// Date D = new Date();

		String kfilename = prop.getProperty("QC_Store_extent_report_file_name") + timestamp + ".html";

		reports = new ExtentReports(
				System.getProperty("user.dir") + prop.getProperty("QC_Store_extent_report_path") + kfilename, true);
		/*
		 * reports = new ExtentReports(System.getProperty("user.dir") +
		 * "/ExecutionReports/CO_ILP/AA_CO_ILP_Generic Scenarios_" + timestamp +
		 * ".html", true); reports.addSystemInfo("Browser Version", "IE 11.0");
		 */
	}

	@BeforeTest(alwaysRun = true)
	public void setup_Grid() throws IOException, InterruptedException {

		try {
			BufferedReader reader;
			reader = new BufferedReader(

					new FileReader("C:/AA_Batch/AA_ILP/src/test/java/pack/Config.properties"));

			prop = new Properties();
			prop.load(reader);
			reader.close();

		}

		catch (Exception e) {

			System.out.println("Object proprties file not found");
		}

		Runtime.getRuntime().exec("taskkill /T /F /IM IEDriverServer.exe");
		Thread.sleep(5000); // Allow OS to kill the process
		System.setProperty("webdriver.ie.driver", System.getProperty("user.dir") + "/IEDriverServer.exe");
		driver = new InternetExplorerDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		/*
		 * String Node = "http://192.168.2.123:5555/wd/hub"; DesiredCapabilities
		 * cap = DesiredCapabilities.internetExplorer();
		 * 
		 * 
		 * System.setProperty("webdriver.ie.driver",System.getProperty(
		 * "user.dir")+"/IEDriverServer.exe");
		 * 
		 * driver = new RemoteWebDriver(new URL(Node), cap);
		 */
		/*
		 * System.setProperty("webdriver.ie.driver",System.getProperty(
		 * "user.dir")+"/IEDriverServer.exe"); driver = new
		 * InternetExplorerDriver();
		 */
	}

	public boolean IsElementExits(String Value) {
		int secondsToWait = 5;

		try {
			new WebDriverWait(driver, secondsToWait)
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath(Value)));
			return true;
		} catch (org.openqa.selenium.TimeoutException e) {
			return false;
		}
	}

	public boolean isAlertPresent() {
		try {
			driver.switchTo().alert();
			return true;
		} catch (NoAlertPresentException ex) {
			return false;
		}
	}

	public static WebElement Field(WebDriver driver) {

		try {
			Thread.sleep(500);
			WebElement element = (new WebDriverWait(driver, 9)).until(ExpectedConditions
					.visibilityOfElementLocated(By.xpath("/html/body/table/tbody/tr/td/table/tbody/tr/td/table")));
			return element;
		} catch (Exception e) {
			return null;
		}
	}

	public void proc(String ReturnFormat) throws ClassNotFoundException, SQLException {
		Connection conn = null;

		// Object of Statement. It is used to create a Statement to execute the
		// query
		Statement stmt = null;

		// Object of ResultSet => 'It maintains a cursor that points to the
		// current row in the result set'
		ResultSet resultSet = null;

		Class.forName("oracle.jdbc.driver.OracleDriver");
		System.out.println("before conn");

		// Open a connection
		try {

			conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.2.242:1521:QFUNDUAT2",
					"QFUNDX_LOCAL_AUTOMATION", "QFUNDX_LOCAL_AUTOMATION");

		} catch (SQLException e1) {

			System.out.println("Connection Failed! Check output console" + e1);
			e1.printStackTrace();
		}

		// Execute a query
		stmt = conn.createStatement();
		System.out.println("after conn");

		try {
			String A = null;

			String content;

			String fw = "E:\\AdminLogin.txt";
			// String content = "\r\n";

			// content=A;
			// fw = "E:\\AdminLogin.txt";

			appendUsingFileWriter(fw, ReturnFormat);
			// appendUsingFileWriter(fw,"\r\n");
			// appendUsingFileWriter(fw,content);

			// String str = content.readLine();

			fw.replaceAll("[0-9,a-z,A-Z]{17,21}", A);

			// fw.close();

			System.out.println("after query");

			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
			}

			if (stmt != null) {
				try {
					stmt.close();
				} catch (Exception e) {
				}
			}

			if (conn != null) {
				try {
					conn.close();
				} catch (Exception e) {
				}
			}
		} catch (Exception e2) {

			System.out.println(" console" + e2);
			e2.printStackTrace();
		}

	}

	private static void appendUsingFileWriter(String filePath, String text) {
		File file = new File(filePath);
		FileWriter fr = null;
		try {
			// Below constructor argument decides whether to append or override
			fr = new FileWriter(file);
			fr.write(text);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				fr.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
